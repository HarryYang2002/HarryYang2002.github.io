<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>演示小程序</title>
      <link href="/2022/09/04/%E6%BC%94%E7%A4%BA%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2022/09/04/%E6%BC%94%E7%A4%BA%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="演示赛车跑圈的小程序"><a href="#演示赛车跑圈的小程序" class="headerlink" title="演示赛车跑圈的小程序"></a>演示赛车跑圈的小程序</h1><p>在首页加上一个按钮，点击按钮进入地图</p><p><img src="/images/image-20220903233149145.png" alt="image-20220903233149145"></p><h1 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h1><p>自己手写一个地图是一个非常困难的事，微信提供了地图组件，运用组件会方便很多</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/component/map.html#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%A4%BA%E4%BE%8B%E4%B8%AD%E5%BF%83">文档</a></p><p>新建一个map文件夹</p><p><img src="/images/image-20220903233628206.png" alt="image-20220903233628206"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">raceData</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&quot;./raceData&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// pages/map/map.js</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">getApp</span>()</span><br><span class="line"></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">motto</span>: <span class="string">&#x27;Hello World from vscode&#x27;</span>,</span><br><span class="line"><span class="attr">userInfo</span>: &#123;&#125;,</span><br><span class="line"><span class="attr">hasUserInfo</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">canIUse</span>: wx.<span class="title function_">canIUse</span>(<span class="string">&#x27;button.open-type.getUserInfo&#x27;</span>),</span><br><span class="line"><span class="attr">setting</span>: &#123;</span><br><span class="line"><span class="attr">skew</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">rotate</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">showLocation</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">showScale</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">subKey</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="attr">layerStyle</span>: -<span class="number">1</span>,</span><br><span class="line"><span class="attr">enableZoom</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">enableScroll</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">enableRotate</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">showCompass</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">enable3D</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">enableOverlooking</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">enableSatellite</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">enableTraffic</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">location</span>: &#123;</span><br><span class="line"><span class="attr">latitude</span>: <span class="number">29.756825521115363</span>,</span><br><span class="line"><span class="attr">longitude</span>: <span class="number">121.87222114786053</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">scale</span>: <span class="number">19</span>,</span><br><span class="line"><span class="attr">markers</span>: [&#123;</span><br><span class="line"><span class="attr">iconPath</span>: <span class="string">&quot;/resources/car.png&quot;</span>,</span><br><span class="line"><span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">latitude</span>: <span class="number">23.099994</span>,</span><br><span class="line"><span class="attr">longitude</span>: <span class="number">113.324520</span>,</span><br><span class="line"><span class="attr">width</span>: <span class="number">50</span>,</span><br><span class="line"><span class="attr">height</span>: <span class="number">50</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">iconPath</span>: <span class="string">&quot;/resources/car.png&quot;</span>,</span><br><span class="line"><span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">latitude</span>: <span class="number">23.099994</span>,</span><br><span class="line"><span class="attr">longitude</span>: <span class="number">114.324520</span>,</span><br><span class="line"><span class="attr">width</span>: <span class="number">50</span>,</span><br><span class="line"><span class="attr">height</span>: <span class="number">50</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">iconPath</span>: <span class="string">&quot;/resources/car.png&quot;</span>,</span><br><span class="line"><span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">latitude</span>: <span class="number">29.756825521115363</span>,</span><br><span class="line"><span class="attr">longitude</span>: <span class="number">121.87222114786053</span>,</span><br><span class="line"><span class="attr">width</span>: <span class="number">20</span>,</span><br><span class="line"><span class="attr">height</span>: <span class="number">20</span></span><br><span class="line">&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//事件处理函数</span></span><br><span class="line"><span class="attr">bindViewTap</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">wx.<span class="title function_">redirectTo</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;../logs/logs?color=blue&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onShow</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;lifecycle: index onShow&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onHide</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;lifecycle: index onHide&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">pathIndex</span>:<span class="number">0</span>,</span><br><span class="line"><span class="attr">translateMarker</span>: <span class="keyword">function</span> (<span class="params">ctx</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">pathIndex</span>++</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">pathIndex</span>&gt;=raceData.<span class="property">path</span>.<span class="property">length</span>)&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ctx.<span class="title function_">translateMarker</span>(&#123;</span><br><span class="line"><span class="attr">markerId</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">destination</span>:&#123;</span><br><span class="line"><span class="attr">latitude</span>:raceData.<span class="property">path</span>[<span class="variable language_">this</span>.<span class="property">pathIndex</span>].<span class="property">lat</span>,</span><br><span class="line"><span class="attr">longitude</span>:raceData.<span class="property">path</span>[<span class="variable language_">this</span>.<span class="property">pathIndex</span>].<span class="property">lng</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">duration</span>: <span class="number">100</span>,</span><br><span class="line"><span class="attr">success</span>:<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">translateMarker</span>(ctx),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onReady</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;lifecycle: index onReady&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> ctx = wx.<span class="title function_">createMapContext</span>(<span class="string">&#x27;map&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">translateMarker</span>(ctx)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onUnload</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;lifecycle: index onUnload&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(raceData)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;lifecycle: index onLoad&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (app.<span class="property">globalData</span>.<span class="property">userInfo</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line"><span class="attr">userInfo</span>: app.<span class="property">globalData</span>.<span class="property">userInfo</span>,</span><br><span class="line"><span class="attr">hasUserInfo</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">canIUse</span>) &#123;</span><br><span class="line"><span class="comment">// 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回</span></span><br><span class="line"><span class="comment">// 所以此处加入 callback 以防止这种情况</span></span><br><span class="line">app.<span class="property">userInfoReadyCallback</span> = <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line"><span class="attr">userInfo</span>: res.<span class="property">userInfo</span>,</span><br><span class="line"><span class="attr">hasUserInfo</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 在没有 open-type=getUserInfo 版本的兼容处理</span></span><br><span class="line">wx.<span class="title function_">getUserInfo</span>(&#123;</span><br><span class="line"><span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">app.<span class="property">globalData</span>.<span class="property">userInfo</span> = res.<span class="property">userInfo</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line"><span class="attr">userInfo</span>: res.<span class="property">userInfo</span>,</span><br><span class="line"><span class="attr">hasUserInfo</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">getUserInfo</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">app.<span class="property">globalData</span>.<span class="property">userInfo</span> = e.<span class="property">detail</span>.<span class="property">userInfo</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line"><span class="attr">userInfo</span>: e.<span class="property">detail</span>.<span class="property">userInfo</span>,</span><br><span class="line"><span class="attr">hasUserInfo</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onBtnTap</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line"><span class="attr">motto</span>: <span class="string">&#x27;button clicked&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--pages/map/map.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;map&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;map&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">latitude</span>=<span class="string">&quot;&#123;&#123;location.latitude&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">longitude</span>=<span class="string">&quot;&#123;&#123;location.longitude&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">scale</span>=<span class="string">&quot;&#123;&#123;scale&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">setting</span>=<span class="string">&quot;&#123;&#123;setting&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">enable-overlooking</span>=<span class="string">&quot;&#123;&#123;isOverLooking&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">enable-3D</span>=<span class="string">&quot;&#123;&#123;is3D&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">markers</span>=<span class="string">&quot;&#123;&#123;markers&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* pages/map/map.wxss */</span></span><br><span class="line"><span class="selector-class">.userinfo</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.userinfo-avatar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">128</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">128</span>rpx;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20</span>rpx;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.userinfo-nickname</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#aaa</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.usermotto</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.map</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  page &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其中raceData.js中存储着赛车移动的经纬度，当我们从首页进入到地图的时候，赛车就会开始跑圈</p><p><img src="/images/6ka3b-jyl0u.gif" alt="6ka3b-jyl0u"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go编程思想（十一）http及其他标准库</title>
      <link href="/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89http%E5%8F%8A%E5%85%B6%E4%BB%96%E6%A0%87%E5%87%86%E5%BA%93/"/>
      <url>/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89http%E5%8F%8A%E5%85%B6%E4%BB%96%E6%A0%87%E5%87%86%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="http标准库"><a href="#http标准库" class="headerlink" title="http标准库"></a>http标准库</h1><p>获取某一个网站的html</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httputil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">res,err := http.Get(<span class="string">&quot;&quot;</span>)<span class="comment">//填写网址</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line"></span><br><span class="line">s, err := httputil.DumpResponse(res, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>,s)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问手机版</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httputil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">request, err := http.NewRequest(http.MethodGet, <span class="string">&quot;url&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">request.Header.Add(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) &quot;</span> +</span><br><span class="line"><span class="string">&quot;AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1&quot;</span>)</span><br><span class="line">res, err := http.DefaultClient.Do(request)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line"></span><br><span class="line">s, err := httputil.DumpResponse(res, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, s)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="json数据格式的处理"><a href="#json数据格式的处理" class="headerlink" title="json数据格式的处理"></a>json数据格式的处理</h1><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Order <span class="keyword">struct</span> &#123;</span><br><span class="line">ID         <span class="type">string</span></span><br><span class="line">Name       <span class="type">string</span></span><br><span class="line">Quantity   <span class="type">int</span></span><br><span class="line">TotalPrice <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">o := Order&#123;</span><br><span class="line">ID:         <span class="string">&quot;1&quot;</span>,</span><br><span class="line">Name:       <span class="string">&quot;Harry&quot;</span>,</span><br><span class="line">Quantity:   <span class="number">3</span>,</span><br><span class="line">TotalPrice: <span class="number">30</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, o)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/deaa7a995c4a42ef88ed5c8e775eecea.png" alt="在这里插入图片描述"><br>最后一行换成<code>fmt.Printf(&quot;%+v\n&quot;, o)</code><br><img src="/images/5ebd3518b2584882bac19b7fe0cc7ef9.png" alt="在这里插入图片描述"><br>可以输出键值对<br>用json打印<br>采用<code>json.Marshal</code>序列化数据，再来打印</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">o := Order&#123;</span><br><span class="line">ID:         <span class="string">&quot;1&quot;</span>,</span><br><span class="line">Name:       <span class="string">&quot;Harry&quot;</span>,</span><br><span class="line">Quantity:   <span class="number">3</span>,</span><br><span class="line">TotalPrice: <span class="number">30</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b, err := json.Marshal(o)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, b)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/2fd46797014c408fa20ab9ea68f6d468.png" alt="在这里插入图片描述"><br>序列化的数据可以在网络上跨语言传输，绝大部分语言都支持对json的解析</p><p>在此基础上我们还可以按照网络上的json格式命名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Order <span class="keyword">struct</span> &#123;</span><br><span class="line">ID         <span class="type">string</span>  <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Name       <span class="type">string</span>  <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Quantity   <span class="type">int</span>     <span class="string">`json:&quot;quantity&quot;`</span></span><br><span class="line">TotalPrice <span class="type">float64</span> <span class="string">`json:&quot;total_price&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样打印出来的就会是：<br><img src="/images/1c6b7c1df27c46b1802c82e867e2b8a9.png" alt="在这里插入图片描述"><br>这里可以拓展的点就很多了，比如说我想让name为空的时候不显示，加一个<code>omitempty</code>即可，例如不能为空啊，绑定中间件什么的有很多文档有详细的讲解，这里就不一一演示</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Order <span class="keyword">struct</span> &#123;</span><br><span class="line">ID         <span class="type">string</span>  <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Name       <span class="type">string</span>  <span class="string">`json:&quot;name,omitempty&quot;`</span></span><br><span class="line">Quantity   <span class="type">int</span>     <span class="string">`json:&quot;quantity&quot;`</span></span><br><span class="line">TotalPrice <span class="type">float64</span> <span class="string">`json:&quot;total_price&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/9f5c7d7b1f6b4331bc30641eed70af16.png" alt="在这里插入图片描述"><br>json还支持嵌套、数组等，感兴趣的同学可以自己去实现</p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Order <span class="keyword">struct</span> &#123;</span><br><span class="line">ID         <span class="type">string</span>  <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Name       <span class="type">string</span>  <span class="string">`json:&quot;name,omitempty&quot;`</span></span><br><span class="line">Quantity   <span class="type">int</span>     <span class="string">`json:&quot;quantity&quot;`</span></span><br><span class="line">TotalPrice <span class="type">float64</span> <span class="string">`json:&quot;total_price&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unmarshal</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">`&#123;&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;Harry&quot;,&quot;quantity&quot;:3,&quot;total_price&quot;:30&#125;`</span></span><br><span class="line"><span class="keyword">var</span> o Order</span><br><span class="line">err := json.Unmarshal([]<span class="type">byte</span>(s), &amp;o)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%+v\n&quot;</span>,o)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">o := Order&#123;</span><br><span class="line">ID:         <span class="string">&quot;1&quot;</span>,</span><br><span class="line">Name:       <span class="string">&quot;Harry&quot;</span>,</span><br><span class="line">Quantity:   <span class="number">3</span>,</span><br><span class="line">TotalPrice: <span class="number">30</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b, err := json.Marshal(o)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, b)</span><br><span class="line">unmarshal()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/d2d357fc7faf4f68b207ed78c76640d3.png" alt="在这里插入图片描述"></p><h1 id="第三方API数据格式的解析技巧"><a href="#第三方API数据格式的解析技巧" class="headerlink" title="第三方API数据格式的解析技巧"></a>第三方API数据格式的解析技巧</h1><p>练习：自然语言解析</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OrderItem <span class="keyword">struct</span> &#123;</span><br><span class="line">ID    <span class="type">string</span>  <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Name  <span class="type">string</span>  <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Price <span class="type">float64</span> <span class="string">`json:&quot;price&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Order <span class="keyword">struct</span> &#123;</span><br><span class="line">ID         <span class="type">string</span>      <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Items      []OrderItem <span class="string">`json:&quot;items&quot;`</span></span><br><span class="line">TotalPrice <span class="type">float64</span>     <span class="string">`json:&quot;total_price&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">parseNLP()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parseNLP</span><span class="params">()</span></span> &#123;</span><br><span class="line">res := <span class="string">`&#123;</span></span><br><span class="line"><span class="string">&quot;data&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;synonym&quot;:&quot;&quot;,</span></span><br><span class="line"><span class="string">&quot;weight&quot;:&quot;0.6&quot;,</span></span><br><span class="line"><span class="string">&quot;word&quot;: &quot;真丝&quot;,</span></span><br><span class="line"><span class="string">&quot;tag&quot;:&quot;材质&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;synonym&quot;:&quot;&quot;,</span></span><br><span class="line"><span class="string">&quot;weight&quot;:&quot;0.8&quot;,</span></span><br><span class="line"><span class="string">&quot;word&quot;: &quot;韩都衣舍&quot;,</span></span><br><span class="line"><span class="string">&quot;tag&quot;:&quot;品牌&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;synonym&quot;:&quot;连身裙;联衣裙&quot;,</span></span><br><span class="line"><span class="string">&quot;weight&quot;:&quot;1.0&quot;,</span></span><br><span class="line"><span class="string">&quot;word&quot;: &quot;连衣裙&quot;,</span></span><br><span class="line"><span class="string">&quot;tag&quot;:&quot;品类&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">&#125;`</span></span><br><span class="line">m := <span class="keyword">struct</span> &#123;</span><br><span class="line">Data []<span class="keyword">struct</span> &#123;</span><br><span class="line">Synonym <span class="type">string</span> <span class="string">`json:&quot;synonym&quot;`</span></span><br><span class="line">Tag     <span class="type">string</span> <span class="string">`json:&quot;tag&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;data&quot;`</span></span><br><span class="line">&#125;&#123;&#125;</span><br><span class="line">err := json.Unmarshal([]<span class="type">byte</span>(res), &amp;m)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%+v, %+v\n&quot;</span>, m.Data[<span class="number">2</span>].Synonym, m.Data[<span class="number">2</span>].Tag)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/fc626790809d4fdb9d1fba99b308d4e8.png" alt="在这里插入图片描述"><br>而我们可通过发送<code>真丝韩都衣舍连衣裙</code>到阿里云的api中，就可以返回这样的数据，上述代码只是一个模拟</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go编程思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迷宫算法 GoLang实现</title>
      <link href="/2022/09/03/%E8%BF%B7%E5%AE%AB%E7%AE%97%E6%B3%95-GoLang%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/09/03/%E8%BF%B7%E5%AE%AB%E7%AE%97%E6%B3%95-GoLang%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//maze.in</span><br><span class="line">6 5</span><br><span class="line">0 1 0 0 0</span><br><span class="line">0 0 0 1 0</span><br><span class="line">0 1 0 1 0</span><br><span class="line">1 1 1 0 0</span><br><span class="line">0 1 0 0 1</span><br><span class="line">0 1 0 0 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readMaze</span><span class="params">(filename <span class="type">string</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">file, err := os.Open(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err.Error())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> row, col <span class="type">int</span></span><br><span class="line">fmt.Fscanf(file, <span class="string">&quot;%d %d&quot;</span>, &amp;row, &amp;col)</span><br><span class="line"></span><br><span class="line">maze := <span class="built_in">make</span>([][]<span class="type">int</span>, row)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> maze &#123;</span><br><span class="line">maze[i] = <span class="built_in">make</span>([]<span class="type">int</span>, col)</span><br><span class="line"><span class="keyword">for</span> j := <span class="keyword">range</span> maze[i] &#123;</span><br><span class="line">fmt.Fscanf(file, <span class="string">&quot;%d&quot;</span>, &amp;maze[i][j])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> maze</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> point <span class="keyword">struct</span> &#123;</span><br><span class="line">i, j <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dirs = [<span class="number">4</span>]point&#123;</span><br><span class="line">&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p point)</span></span> add(r point) point &#123;</span><br><span class="line"><span class="keyword">return</span> point&#123;p.i + r.i, p.j + r.j&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p point)</span></span> at(grid [][]<span class="type">int</span>) (<span class="type">int</span>, <span class="type">bool</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> p.i &lt; <span class="number">0</span> || p.i &gt;= <span class="built_in">len</span>(grid) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> p.j &lt; <span class="number">0</span> || p.j &gt;= <span class="built_in">len</span>(grid[p.i]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> grid[p.i][p.j], <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">walk</span><span class="params">(maze [][]<span class="type">int</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">start, end point)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">steps := <span class="built_in">make</span>([][]<span class="type">int</span>, <span class="built_in">len</span>(maze))</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> steps &#123;</span><br><span class="line">steps[i] = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(maze[i]))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Q := []point&#123;start&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(Q) &gt; <span class="number">0</span> &#123;</span><br><span class="line">cur := Q[<span class="number">0</span>]</span><br><span class="line">Q = Q[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> cur == end &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, dir := <span class="keyword">range</span> dirs &#123;</span><br><span class="line">next := cur.add(dir)</span><br><span class="line"></span><br><span class="line">val, ok := next.at(maze)</span><br><span class="line"><span class="keyword">if</span> !ok || val == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val, ok = next.at(steps)</span><br><span class="line"><span class="keyword">if</span> !ok || val != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> next == start &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">curSteps, _ := cur.at(steps)</span><br><span class="line">steps[next.i][next.j] =</span><br><span class="line">curSteps + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Q = <span class="built_in">append</span>(Q, next)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> steps</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">maze := readMaze(<span class="string">&quot;maze.in&quot;</span>)</span><br><span class="line"></span><br><span class="line">steps := walk(maze, point&#123;<span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">point&#123;<span class="built_in">len</span>(maze) - <span class="number">1</span>, <span class="built_in">len</span>(maze[<span class="number">0</span>]) - <span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, row := <span class="keyword">range</span> steps &#123;</span><br><span class="line"><span class="keyword">for</span> _, val := <span class="keyword">range</span> row &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%3d&quot;</span>, val)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/94df09ba1bd24fe5ac96ade6abeade9b.png" alt="结果"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Go编程思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go编程思想（十）Channel</title>
      <link href="/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E5%8D%81%EF%BC%89Channel/"/>
      <url>/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E5%8D%81%EF%BC%89Channel/</url>
      
        <content type="html"><![CDATA[<h1 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h1><h2 id="channel知识"><a href="#channel知识" class="headerlink" title="channel知识"></a>channel知识</h2><p><img src="/images/595a1344f2e44571b948458c1c7d4823.png" alt="在这里插入图片描述"><br><strong>创建channel的两种方式</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c <span class="keyword">chan</span> <span class="type">int</span> <span class="comment">//c == nil</span></span><br><span class="line">channel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br></pre></td></tr></table></figure><p><strong>向channel传数据的方式（int为例）</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c &lt;- <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>接收数据</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n := &lt;-c</span><br></pre></td></tr></table></figure><p><strong>示例程序</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chanDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">c &lt;- <span class="number">1</span></span><br><span class="line">c &lt;- <span class="number">2</span></span><br><span class="line">n := &lt;-c</span><br><span class="line">fmt.Println(n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">chanDemo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong><br><img src="/images/6f58702c91b944568f3a4f1445500e50.png" alt="在这里插入图片描述"><br>程序挂掉了，原因是死锁，死锁在 <code>c &lt;- 1</code>中<br>它发送了数据，但没有人去接收它，为了解决这个问题，我们必须开一个goroutine去不停的接收数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</span><br><span class="line">n := &lt;-c</span><br><span class="line">fmt.Println(n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>整体代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chanDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</span><br><span class="line">n := &lt;-c</span><br><span class="line">fmt.Println(n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">c &lt;- <span class="number">1</span></span><br><span class="line">c &lt;- <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">chanDemo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果<br><img src="/images/805985da5b5e4464a503e8ac9bc05a9e.png" alt="在这里插入图片描述"></p><p>让我们再来看个例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">n := &lt;-c</span><br><span class="line">fmt.Printf(<span class="string">&quot;worker %d received %c\n&quot;</span>, id, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chanDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> channels [<span class="number">10</span>]<span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>;i &lt; <span class="number">10</span>;i++&#123;</span><br><span class="line">channels[i] = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"> <span class="keyword">go</span> worker(i,channels[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">channels[i] &lt;- i + <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">chanDemo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们开了10个worker去传数据，接收并打印，结果是：<br><img src="/images/6dea93b5883e4d378c082967571b49b3.png" alt="在这里插入图片描述"><br>原因是它接收了数据，但还来不及打印main函数就已经结束了，老方法，加上<code>time.Sleep(time.Millisecond)</code>即可解决<br><img src="/images/44b6fd6759be4dcc84fe0981a28d8354.png" alt="在这里插入图片描述"><br>我们再改进一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">creatWorker</span><span class="params">(id <span class="type">int</span>)</span></span> <span class="keyword">chan</span>&lt;- <span class="type">int</span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(id <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">n := &lt;-c</span><br><span class="line">fmt.Printf(<span class="string">&quot;worker %d received %c\n&quot;</span>, id, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;(id)</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chanDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> channels [<span class="number">10</span>]<span class="keyword">chan</span>&lt;- <span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>;i &lt; <span class="number">10</span>;i++&#123;</span><br><span class="line">channels[i] = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"> channels[i] = creatWorker(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">channels[i] &lt;- i + <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">channels[i] &lt;- i + <span class="string">&#x27;A&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">chanDemo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建一个channel类型的数组，后续就可以实现对收进来的数据进行利用</p><ul><li>&lt;-chan 发数据</li><li>chan&lt;- 收数据</li></ul><h2 id="bufferedChannel知识"><a href="#bufferedChannel知识" class="headerlink" title="bufferedChannel知识"></a>bufferedChannel知识</h2><p>在上面，我们谈了谈channel的知识，知道了发数据一定要有人收，不然会死锁报错，但收发数据就一定涉及到了协程的切换，尽管协程是一个轻量级的东西，但频繁的切换也会耗费一定的资源，那么，就有了缓冲区的存在<br><img src="/images/816da5620555421497216b5db357298d.png" alt="在这里插入图片描述"><br><img src="/images/f7f62a66a8dc47e195fd006b2f0c8491.png" alt="在这里插入图片描述"><br>我们定义了个大小为3的缓冲区，连续向里面发三个数据，它会呆在缓冲区中，发三个以上它才会报错</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">n := &lt;-c</span><br><span class="line">fmt.Printf(<span class="string">&quot;worker %d received %c\n&quot;</span>, id, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">creatWorker</span><span class="params">(id <span class="type">int</span>)</span></span> <span class="keyword">chan</span>&lt;- <span class="type">int</span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> worker(id, c)</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bufferedChannel</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">go</span> worker(<span class="number">0</span>,c)</span><br><span class="line">c &lt;- <span class="string">&#x27;a&#x27;</span></span><br><span class="line">c &lt;- <span class="string">&#x27;b&#x27;</span></span><br><span class="line">c &lt;- <span class="string">&#x27;c&#x27;</span></span><br><span class="line">time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">bufferedChannel()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/7ff08635db05475ab7fc5f98d0d26900.png" alt="在这里插入图片描述"><br>与channel相比，bufferedChannel的使用是完全一样的，不同的是bufferedChannel带有缓冲区，在提高性能这方面是有一定的优势的</p><h2 id="channelClose"><a href="#channelClose" class="headerlink" title="channelClose"></a>channelClose</h2><p>在上面的worker中，那个goroutine是不知道什么时候发完了，我们可以手动关闭它</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">n := &lt;-c</span><br><span class="line">fmt.Printf(<span class="string">&quot;worker %d received %c\n&quot;</span>, id, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">creatWorker</span><span class="params">(id <span class="type">int</span>)</span></span> <span class="keyword">chan</span>&lt;- <span class="type">int</span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> worker(id, c)</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">channelClose</span><span class="params">()</span></span>  &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> worker(<span class="number">0</span>,c)</span><br><span class="line">c &lt;- <span class="string">&#x27;a&#x27;</span></span><br><span class="line">c &lt;- <span class="string">&#x27;b&#x27;</span></span><br><span class="line">c &lt;- <span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="built_in">close</span>(c)</span><br><span class="line">time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">channelClose()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/images/8f984d1335814265a60d4a0bc599b692.png" alt="在这里插入图片描述"><br><img src="/images/83fa08536a714f8a9a8625e7fa6ff826.png" alt="在这里插入图片描述"><br>除了前三行接收到了数据，后面收到的都是空串，收了一毫秒的空串，下面对worker做一些调整</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两种方法皆可</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">n,ok := &lt;-c</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;worker %d received %c\n&quot;</span>, id, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> n := <span class="keyword">range</span> c &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;worker %d received %c\n&quot;</span>, id, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/d25ef49af5b24e339d91a3726b64ca44.png" alt="在这里插入图片描述"><br>解决</p><h1 id="使用channel等待任务结束"><a href="#使用channel等待任务结束" class="headerlink" title="使用channel等待任务结束"></a>使用channel等待任务结束</h1><p><img src="/images/4f3b2cbf4d81430188e573e5f393da94.png" alt="在这里插入图片描述"><br>在上面，我们是通过简单粗暴的<code>time.Sleep(time.Millisecond)</code>来实现打印的，接下来我们要学习通过channel来通信</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doWorker</span><span class="params">(id <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>,done <span class="keyword">chan</span> <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> n := <span class="keyword">range</span> c &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;worker %d received %c\n&quot;</span>, id, n)</span><br><span class="line">done &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> worker <span class="keyword">struct</span> &#123;</span><br><span class="line">in <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">done <span class="keyword">chan</span> <span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">creatWorker</span><span class="params">(id <span class="type">int</span>)</span></span> worker &#123;</span><br><span class="line">w := worker&#123;</span><br><span class="line">in:   <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>),</span><br><span class="line">done: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> doWorker(id, w.in,w.done)</span><br><span class="line"><span class="keyword">return</span> w</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chanDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> workers [<span class="number">10</span>]worker</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">workers[i] = creatWorker(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">workers[i].in &lt;- i + <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&lt;-workers[i].done</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">workers[i].in &lt;- i + <span class="string">&#x27;A&#x27;</span></span><br><span class="line">&lt;-workers[i].done</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">chanDemo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>传入一个done，来表示结束<br>运行结果：<br><img src="/images/be970335d1504f8a8218b17dab89db39.png" alt="在这里插入图片描述"><br>可以看到他是正常打印，但有一个问题是这是一个顺序打印，如果是顺序打印就没有必要弄并发了<br>修改一下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doWorker</span><span class="params">(id <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>, done <span class="keyword">chan</span> <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> n := <span class="keyword">range</span> c &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;worker %d received %c\n&quot;</span>, id, n)</span><br><span class="line">done &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> worker <span class="keyword">struct</span> &#123;</span><br><span class="line">in   <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">done <span class="keyword">chan</span> <span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">creatWorker</span><span class="params">(id <span class="type">int</span>)</span></span> worker &#123;</span><br><span class="line">w := worker&#123;</span><br><span class="line">in:   <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>),</span><br><span class="line">done: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> doWorker(id, w.in, w.done)</span><br><span class="line"><span class="keyword">return</span> w</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chanDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> workers [<span class="number">10</span>]worker</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">workers[i] = creatWorker(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i, worker := <span class="keyword">range</span> workers &#123;</span><br><span class="line">worker.in &lt;- i + <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i, worker := <span class="keyword">range</span> workers &#123;</span><br><span class="line">worker.in &lt;- i + <span class="string">&#x27;A&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, worker := <span class="keyword">range</span> workers &#123;</span><br><span class="line">&lt;-worker.done</span><br><span class="line">&lt;-worker.done</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">chanDemo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/images/01b67910c02a45dabaa56211e9b8bbb1.png" alt="在这里插入图片描述"><br>可以看到第一个循环是可以正常打印的，但之后它会报错，原因是doWorker函数中传出了一个done，但是这个done的接收在第二个for循环之后，所以还没有接收到这个done，就开始第二次传递了，因此会造成死锁<br><strong>解决方法一：</strong><br>既然没有人接收它，那我们再开一个goroutine不就好了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doWorker</span><span class="params">(id <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>, done <span class="keyword">chan</span> <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> n := <span class="keyword">range</span> c &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;worker %d received %c\n&quot;</span>, id, n)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">done &lt;- <span class="literal">true</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方法二：</strong><br>大小写分开接收，在传递数据的两个for循环中插入一个接收即可，即先并发地打印小写，在并发地打印大写</p><p><strong>解决方法三：</strong><br>设置等待组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doWorker</span><span class="params">(id <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> n := <span class="keyword">range</span> c &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;worker %d received %c\n&quot;</span>, id, n)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> worker <span class="keyword">struct</span> &#123;</span><br><span class="line">in <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">wg *sync.WaitGroup</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">creatWorker</span><span class="params">(id <span class="type">int</span>, wg *sync.WaitGroup)</span></span> worker &#123;</span><br><span class="line">w := worker&#123;</span><br><span class="line">in: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>),</span><br><span class="line">wg: wg,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> doWorker(id, w.in, wg)</span><br><span class="line"><span class="keyword">return</span> w</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chanDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> workers [<span class="number">10</span>]worker</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">workers[i] = creatWorker(i,&amp;wg)</span><br><span class="line">&#125;</span><br><span class="line">wg.Add(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">for</span> i, worker := <span class="keyword">range</span> workers &#123;</span><br><span class="line">worker.in &lt;- i + <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i, worker := <span class="keyword">range</span> workers &#123;</span><br><span class="line">worker.in &lt;- i + <span class="string">&#x27;A&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">chanDemo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设立了一个等待组，现在总共有20个任务，我们可以直接<code>wg.Add(20)</code>，后面再<code>wg.Wait()</code>等待所有任务都执行完毕</p><p>最后我们用函数式编程封装一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doWorker</span><span class="params">(id <span class="type">int</span>, w worker)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> n := <span class="keyword">range</span> w.in&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;worker %d received %c\n&quot;</span>, id, n)</span><br><span class="line">w.done()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> worker <span class="keyword">struct</span> &#123;</span><br><span class="line">in <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">done <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">creatWorker</span><span class="params">(id <span class="type">int</span>, wg *sync.WaitGroup)</span></span> worker &#123;</span><br><span class="line">w := worker&#123;</span><br><span class="line">in: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>),</span><br><span class="line">done: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> doWorker(id, w)</span><br><span class="line"><span class="keyword">return</span> w</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chanDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">var</span> workers [<span class="number">10</span>]worker</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">workers[i] = creatWorker(i,&amp;wg)</span><br><span class="line">&#125;</span><br><span class="line">wg.Add(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">for</span> i, worker := <span class="keyword">range</span> workers &#123;</span><br><span class="line">worker.in &lt;- i + <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i, worker := <span class="keyword">range</span> workers &#123;</span><br><span class="line">worker.in &lt;- i + <span class="string">&#x27;A&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">chanDemo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h1><p>上面的例子都是只有一个接收者，如果我们有多个接收者同时接收数据，哪个接收的快就先打印哪个，该怎么做呢，这就要用到select</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generator</span><span class="params">()</span></span> <span class="keyword">chan</span> <span class="type">int</span> &#123;</span><br><span class="line">out := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">time.Sleep(time.Duration(rand.Intn(<span class="number">1500</span>)) * time.Millisecond)</span><br><span class="line">out &lt;- i</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c1, c2 = generator(), generator()</span><br><span class="line"><span class="keyword">for</span>  &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> n := &lt;-c1:</span><br><span class="line">fmt.Println(<span class="string">&quot;Received form c1: &quot;</span>, n)</span><br><span class="line"><span class="keyword">case</span> n := &lt;-c2:</span><br><span class="line">fmt.Println(<span class="string">&quot;Received from c2: &quot;</span>, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/945611404d9546bf8c963f8a74f954c4.png" alt="在这里插入图片描述"><br>接下来我们用select来修改一下上面的worker</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generator</span><span class="params">()</span></span> <span class="keyword">chan</span> <span class="type">int</span> &#123;</span><br><span class="line">out := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">time.Sleep(time.Duration(rand.Intn(<span class="number">1500</span>)) * time.Millisecond)</span><br><span class="line">out &lt;- i</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> n := <span class="keyword">range</span> c &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;worker %d received %d\n&quot;</span>, id, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">creatWorker</span><span class="params">(id <span class="type">int</span>)</span></span> <span class="keyword">chan</span>&lt;- <span class="type">int</span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> worker(id, c)</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c1, c2 = generator(), generator()</span><br><span class="line">w := creatWorker(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> n := &lt;-c1:</span><br><span class="line">w &lt;- n</span><br><span class="line"><span class="keyword">case</span> n := &lt;-c2:</span><br><span class="line">w &lt;- n</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/0e6c8b5602e44a0d8742b897c6843d65.png" alt="在这里插入图片描述"><br>但这样做有一个缺点，我们在select中收了一个数，将他送给了w，这个过程又会阻塞住，我们希望在select中既可以收，又可以发<br>伪代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">case n = &lt;-c1:</span><br><span class="line">case n = &lt;-c2:</span><br><span class="line">case w &lt;- n:</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">n := <span class="number">0</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> n = &lt;-c1:</span><br><span class="line"><span class="keyword">case</span> n = &lt;-c2:</span><br><span class="line"><span class="keyword">case</span> w &lt;- n:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做了上述代码的修改后，我们可以实现有发又收，但是，由于我们在发数据的时候定义了个sleep的时间，所以在这个空挡中会一直发0，可以看运行结果：<br><img src="/images/dc090e36321142bc90e8d52c75b197b6.png" alt="在这里插入图片描述"><br>果不其然，所以我们的n要存在外面<br>并且，我们需要定义当有值的时候才能传出去<br>之前我们讲过，空channel是不会被select到的，我们可以充分利用这个特性</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generator</span><span class="params">()</span></span> <span class="keyword">chan</span> <span class="type">int</span> &#123;</span><br><span class="line">out := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">time.Sleep(time.Duration(rand.Intn(<span class="number">1500</span>)) * time.Millisecond)</span><br><span class="line">out &lt;- i</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> n := <span class="keyword">range</span> c &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;worker %d received %d\n&quot;</span>, id, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">creatWorker</span><span class="params">(id <span class="type">int</span>)</span></span> <span class="keyword">chan</span>&lt;- <span class="type">int</span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> worker(id, c)</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c1, c2 = generator(), generator()</span><br><span class="line"><span class="keyword">var</span> worker = creatWorker(<span class="number">0</span>)</span><br><span class="line">n := <span class="number">0</span></span><br><span class="line">hasValue := <span class="literal">false</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> activeWorker <span class="keyword">chan</span>&lt;- <span class="type">int</span></span><br><span class="line"><span class="keyword">if</span> hasValue &#123;</span><br><span class="line">activeWorker = worker</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> n = &lt;-c1:</span><br><span class="line">hasValue = <span class="literal">true</span></span><br><span class="line"><span class="keyword">case</span> n = &lt;-c2:</span><br><span class="line">hasValue = <span class="literal">true</span></span><br><span class="line"><span class="keyword">case</span> activeWorker &lt;- n:</span><br><span class="line">hasValue = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们定义了activeWorker这个空channel，当hasValue为true时，它才会被初始化，变得可以被select到，以此来实现数据的发送<br>但这个程序还是有问题，假如c1发送的比较快，一下子发了多个数据，可activeWorker发出去的速度比较慢，有可能只发送出了最后一个数据，来演示一下吧<br>向worker中添加sleep</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> n := <span class="keyword">range</span> c &#123;</span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">fmt.Printf(<span class="string">&quot;worker %d received %d\n&quot;</span>, id, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/174027396c564427adbe3394db27f32d.png" alt="在这里插入图片描述"><br>不能全部select到<br>为了解决这个问题，我们需要将这些被冲掉的n存起来</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c1, c2 = generator(), generator()</span><br><span class="line"><span class="keyword">var</span> worker = creatWorker(<span class="number">0</span>)</span><br><span class="line">n := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> values []<span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> activeWorker <span class="keyword">chan</span>&lt;- <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> activeValue <span class="type">int</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(values) &gt; <span class="number">0</span> &#123;</span><br><span class="line">activeWorker = worker</span><br><span class="line">activeValue = values[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> n = &lt;-c1:</span><br><span class="line">values = <span class="built_in">append</span>(values, n)</span><br><span class="line"><span class="keyword">case</span> n = &lt;-c2:</span><br><span class="line">values = <span class="built_in">append</span>(values, n)</span><br><span class="line"><span class="keyword">case</span> activeWorker &lt;- activeValue:</span><br><span class="line">values = values[<span class="number">1</span>:]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改了main函数，添加了activeValue和values数组，将传递的数据先存进去，在一个一个传出来<br><img src="/images/ac501542a3704011a295d7ed84e301c0.png" alt="在这里插入图片描述"><br>还有一点，我们现在这个程序是不能自动结束的，我们想让他运行十秒钟后结束，并且如果800毫秒没有接收到数据就打印timeout</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c1, c2 = generator(), generator()</span><br><span class="line"><span class="keyword">var</span> worker = creatWorker(<span class="number">0</span>)</span><br><span class="line">n := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> values []<span class="type">int</span></span><br><span class="line">tm := time.After(<span class="number">10</span> * time.Second)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> activeWorker <span class="keyword">chan</span>&lt;- <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> activeValue <span class="type">int</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(values) &gt; <span class="number">0</span> &#123;</span><br><span class="line">activeWorker = worker</span><br><span class="line">activeValue = values[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> n = &lt;-c1:</span><br><span class="line">values = <span class="built_in">append</span>(values, n)</span><br><span class="line"><span class="keyword">case</span> n = &lt;-c2:</span><br><span class="line">values = <span class="built_in">append</span>(values, n)</span><br><span class="line"><span class="keyword">case</span> activeWorker &lt;- activeValue:</span><br><span class="line">values = values[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(<span class="number">800</span> * time.Millisecond):</span><br><span class="line">fmt.Println(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> &lt;-tm:</span><br><span class="line">fmt.Println(<span class="string">&quot;bye&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/54c1940577e14148a04f1f41b1f15fc6.png" alt="在这里插入图片描述"><br>在此基础上，我们想每一秒就查看一下values的长度</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c1, c2 = generator(), generator()</span><br><span class="line"><span class="keyword">var</span> worker = creatWorker(<span class="number">0</span>)</span><br><span class="line">n := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> values []<span class="type">int</span></span><br><span class="line">tm := time.After(<span class="number">10</span> * time.Second)</span><br><span class="line">tick := time.Tick(time.Second)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> activeWorker <span class="keyword">chan</span>&lt;- <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> activeValue <span class="type">int</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(values) &gt; <span class="number">0</span> &#123;</span><br><span class="line">activeWorker = worker</span><br><span class="line">activeValue = values[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> n = &lt;-c1:</span><br><span class="line">values = <span class="built_in">append</span>(values, n)</span><br><span class="line"><span class="keyword">case</span> n = &lt;-c2:</span><br><span class="line">values = <span class="built_in">append</span>(values, n)</span><br><span class="line"><span class="keyword">case</span> activeWorker &lt;- activeValue:</span><br><span class="line">values = values[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(<span class="number">800</span> * time.Millisecond):</span><br><span class="line">fmt.Println(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> &lt;-tick:</span><br><span class="line">fmt.Println(<span class="string">&quot;queue len = &quot;</span>,<span class="built_in">len</span>(values))</span><br><span class="line"><span class="keyword">case</span> &lt;-tm:</span><br><span class="line">fmt.Println(<span class="string">&quot;bye&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/8b5e914ac2d9433a9db2f7b217c4bfa3.png" alt="在这里插入图片描述"><br>有了tick的存在，就基本上不会有timeout的出现</p><h1 id="传统同步机制"><a href="#传统同步机制" class="headerlink" title="传统同步机制"></a>传统同步机制</h1><p>go语言除了基于csp外的同步机制外，同时也支持传统的同步机制，比如我们之前用到过的WaitGroup</p><p>传统同步机制</p><ul><li>WaitGroup</li><li>Mutex</li><li>Cond</li></ul><p>WaitGroup看之前的实现就好，现在我们来看看互斥量Mutex</p><h2 id="Mutex"><a href="#Mutex" class="headerlink" title="Mutex"></a>Mutex</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> atomicInt <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *atomicInt)</span></span> increment() &#123;</span><br><span class="line">*a++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *atomicInt)</span></span> get() <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">int</span>(*a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a atomicInt</span><br><span class="line">a.increment()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">a.increment()</span><br><span class="line">&#125;()</span><br><span class="line">time.Sleep(time.Millisecond)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果是2</p><p>我们用<code>go run -race atomic.go</code>来看看他们的冲突</p><p><img src="/images/c378c48c183b4dd88d2948fd39adcc44.png" alt="在这里插入图片描述"><br>产生了读写冲突，分别在第25行的读和第11行的写，有可能在读的时候，发生了正在写的动作，因为没有锁的存在，所以产生了DATA RACE<br>那我们就给他加上锁</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> atomicInt <span class="keyword">struct</span> &#123;</span><br><span class="line">value <span class="type">int</span></span><br><span class="line">lock sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *atomicInt)</span></span> increment() &#123;</span><br><span class="line">a.lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> a.lock.Unlock()</span><br><span class="line">a.value++</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *atomicInt)</span></span> get() <span class="type">int</span> &#123;</span><br><span class="line">a.lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> a.lock.Unlock()</span><br><span class="line"><span class="keyword">return</span> a.value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a atomicInt</span><br><span class="line">a.increment()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">a.increment()</span><br><span class="line">&#125;()</span><br><span class="line">time.Sleep(time.Millisecond)</span><br><span class="line">fmt.Println(a.get())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将a定义成结构体，里边有值和锁，然后分别在读写的过程中加锁的操作即可，再次运行<code>go run -race atomic.go</code>检查一下<br><img src="/images/5b444b537f5049ffa63bfb597f92ab95.png" alt="在这里插入图片描述"><br>无错</p><p>还有一点，我们现在实现了一行代码的锁，而如何实现代码块的锁呢，很简单，用匿名函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *atomicInt)</span></span> increment() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;safe&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">a.lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> a.lock.Unlock()</span><br><span class="line">a.value++</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/aee775df1b164866883a84426351487b.png" alt="在这里插入图片描述"><br>也同样没有DATA RACE<br><img src="/images/7c5d5a7b45b941adae305381def51f21.png" alt="在这里插入图片描述"><br>传统同步机制我们比较少用，因为这些机制都是通过共享内存来实现通信的，而我们要尽量通过channel来实现通过通信来共享内存</p><h1 id="并发模式"><a href="#并发模式" class="headerlink" title="并发模式"></a>并发模式</h1><h2 id="数据生成器"><a href="#数据生成器" class="headerlink" title="数据生成器"></a>数据生成器</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">msgGen</span><span class="params">()</span></span> <span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">time.Sleep(time.Duration(rand.Intn(<span class="number">2000</span>)) * time.Millisecond)</span><br><span class="line">c &lt;- fmt.Sprintf(<span class="string">&quot;message %d&quot;</span>, i)</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := msgGen()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(&lt;-m)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="服务-x2F-任务"><a href="#服务-x2F-任务" class="headerlink" title="服务&#x2F;任务"></a>服务&#x2F;任务</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">msgGen</span><span class="params">(name <span class="type">string</span>)</span></span> <span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">time.Sleep(time.Duration(rand.Intn(<span class="number">2000</span>)) * time.Millisecond)</span><br><span class="line">c &lt;- fmt.Sprintf(<span class="string">&quot;service %s message %d&quot;</span>, name, i)</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m1 := msgGen(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">m2 := msgGen(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(&lt;-m1)</span><br><span class="line">fmt.Println(&lt;-m2)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/d82461434b6c4f34a8da0aa76f272870.png" alt="在这里插入图片描述"></p><p> msgGen这个函数不仅可以是生成器，还可以是任务&#x2F;服务，我们有了msgGen返回的chan string，就可以参与交互</p><h2 id="同时等待多种服务"><a href="#同时等待多种服务" class="headerlink" title="同时等待多种服务"></a>同时等待多种服务</h2><p>在上面的运行中，m1,m2是交替的，我们要实现同时等待多种服务<br><img src="/images/804a061c27c14e85a897928f0d1fdc09.png" alt="在这里插入图片描述"></p><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">msgGen</span><span class="params">(name <span class="type">string</span>)</span></span> <span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">time.Sleep(time.Duration(rand.Intn(<span class="number">2000</span>)) * time.Millisecond)</span><br><span class="line">c &lt;- fmt.Sprintf(<span class="string">&quot;service %s message %d&quot;</span>, name, i)</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fanIn</span><span class="params">(c1, c2 <span class="keyword">chan</span> <span class="type">string</span>)</span></span> <span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"><span class="comment">//从c1中拿出数据送给c</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</span><br><span class="line">c &lt;- &lt;-c1</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">//从c2中拿出数据送给c</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</span><br><span class="line">c &lt;- &lt;-c2</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m1 := msgGen(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">m2 := msgGen(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">m := fanIn(m1, m2)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(&lt;-m)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/37806eae131c4ab291ef7cb6bec4e029.png" alt="在这里插入图片描述"><br>可以看到，1到8了2才到5，并不是交替进行，功能实现</p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fanInBySelect</span><span class="params">(c1, c2 <span class="keyword">chan</span> <span class="type">string</span>)</span></span> <span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> m := &lt;-c1:</span><br><span class="line">c &lt;- m</span><br><span class="line"><span class="keyword">case</span> m := &lt;-c2:</span><br><span class="line">c &lt;- m</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m1 := msgGen(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">m2 := msgGen(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">m := fanInBySelect(m1, m2)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(&lt;-m)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过select来实现，结果相同</p><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>在知道有多少个goroutine的时候，我们优先选择用select，写起来也方便，同时也只用开一个goroutine去接收，但在少数情况下，我们不知道有多少个goroutine的时候，采用第一种，将其用for循环包起来即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fanIn</span><span class="params">(chs ... <span class="keyword">chan</span> <span class="type">string</span>)</span></span> <span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"><span class="keyword">for</span> _,ch := <span class="keyword">range</span> chs&#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</span><br><span class="line">c &lt;- &lt;-ch</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/7d5ebf59986d4571b93984bbb1229f38.png" alt="在这里插入图片描述"><br>奇怪的是我们只能接收到2穿过来的数据，没法接收到1的，这明显是错误的<br>这是由于go的语法，我们有两个发数据的goroutine，所以我们的for循环了两次，它第一次创建时，为1创建了个goroutine，第二次创建时，为2创建了个goroutine，但就是这个后创建的goroutine覆盖掉了第一个创建的goroutine，导致只能接收到2发送的数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fanIn</span><span class="params">(chs ...<span class="keyword">chan</span> <span class="type">string</span>)</span></span> <span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"><span class="keyword">for</span> _, ch := <span class="keyword">range</span> chs &#123;</span><br><span class="line">chCopy := ch</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</span><br><span class="line">c &lt;- &lt;-chCopy</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们用chCopy来存储ch，ch定义在括号外，所以全局就只有一份ch，而chCopy定义在括号内，循环了几次，就有几个chCopy，这样就不会被覆盖掉，运行结果无错<br>我们还有一个办法，是利用函数传参把ch传递进去，效果同chCopy</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fanIn</span><span class="params">(chs ...<span class="keyword">chan</span> <span class="type">string</span>)</span></span> <span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"><span class="keyword">for</span> _, ch := <span class="keyword">range</span> chs &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(in <span class="keyword">chan</span> <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</span><br><span class="line">c &lt;- &lt;-ch</span><br><span class="line">&#125;</span><br><span class="line">&#125;(ch)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="并发任务的控制"><a href="#并发任务的控制" class="headerlink" title="并发任务的控制"></a>并发任务的控制</h1><h2 id="非阻塞等待"><a href="#非阻塞等待" class="headerlink" title="非阻塞等待"></a>非阻塞等待</h2><p>还是以上面的例子做案例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nonBlockingWait</span><span class="params">(c <span class="keyword">chan</span> <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">bool</span>) &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> m := &lt;-c:</span><br><span class="line"><span class="keyword">return</span> m,<span class="literal">true</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>,<span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦遇到阻塞，程序就会运行default</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m1 := msgGen(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">m2 := msgGen(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(&lt;-m1)</span><br><span class="line"><span class="keyword">if</span> m,ok := nonBlockingWait(m2);ok&#123;</span><br><span class="line">fmt.Println(m)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;No msg&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/fe0bc5cd71904a79ada14cd5a3ba9a55.png" alt="在这里插入图片描述"></p><h2 id="超时机制"><a href="#超时机制" class="headerlink" title="超时机制"></a>超时机制</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">msgGen</span><span class="params">(name <span class="type">string</span>)</span></span> <span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">time.Sleep(time.Duration(rand.Intn(<span class="number">5000</span>)) * time.Millisecond)</span><br><span class="line">c &lt;- fmt.Sprintf(<span class="string">&quot;service %s message %d&quot;</span>, name, i)</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fanIn</span><span class="params">(chs ...<span class="keyword">chan</span> <span class="type">string</span>)</span></span> <span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"><span class="keyword">for</span> _, ch := <span class="keyword">range</span> chs &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(in <span class="keyword">chan</span> <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</span><br><span class="line">c &lt;- &lt;-ch</span><br><span class="line">&#125;</span><br><span class="line">&#125;(ch)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fanInBySelect</span><span class="params">(c1, c2 <span class="keyword">chan</span> <span class="type">string</span>)</span></span> <span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> m := &lt;-c1:</span><br><span class="line">c &lt;- m</span><br><span class="line"><span class="keyword">case</span> m := &lt;-c2:</span><br><span class="line">c &lt;- m</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nonBlockingWait</span><span class="params">(c <span class="keyword">chan</span> <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">bool</span>) &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> m := &lt;-c:</span><br><span class="line"><span class="keyword">return</span> m,<span class="literal">true</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>,<span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeoutWait</span><span class="params">(c <span class="keyword">chan</span> <span class="type">string</span>, timeout time.Duration)</span></span> (<span class="type">string</span>,<span class="type">bool</span>) &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> m := &lt;-c:</span><br><span class="line"><span class="keyword">return</span> m,<span class="literal">true</span></span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(timeout):</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>,<span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m1 := msgGen(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> m,ok := timeoutWait(m1,<span class="number">2</span> * time.Second);ok&#123;</span><br><span class="line">fmt.Println(m)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Timeout&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/8907dfe9d7f744e6b66e4374f65a1acb.png" alt="在这里插入图片描述"></p><h2 id="任务终端-x2F-退出"><a href="#任务终端-x2F-退出" class="headerlink" title="任务终端&#x2F;退出"></a>任务终端&#x2F;退出</h2><p>传递一个done的channel即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">msgGen</span><span class="params">(name <span class="type">string</span>, done <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> <span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(time.Duration(rand.Intn(<span class="number">2000</span>)) * time.Millisecond):</span><br><span class="line">c &lt;- fmt.Sprintf(<span class="string">&quot;service %s message %d&quot;</span>, name, i)</span><br><span class="line"><span class="keyword">case</span> &lt;-done:</span><br><span class="line">fmt.Println(<span class="string">&quot;cleaning up&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeoutWait</span><span class="params">(c <span class="keyword">chan</span> <span class="type">string</span>, timeout time.Duration)</span></span> (<span class="type">string</span>, <span class="type">bool</span>) &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> m := &lt;-c:</span><br><span class="line"><span class="keyword">return</span> m, <span class="literal">true</span></span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(timeout):</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">m1 := msgGen(<span class="string">&quot;1&quot;</span>,done)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> m, ok := timeoutWait(m1, time.Second); ok &#123;</span><br><span class="line">fmt.Println(m)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Timeout&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">done &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/d096bd8aef2a43749289118f45656f99.png" alt="在这里插入图片描述"></p><h2 id="优雅退出"><a href="#优雅退出" class="headerlink" title="优雅退出"></a>优雅退出</h2><p>退出我们在上面实现了，可是真的实现了吗，加入这是一个服务器，我们怎么确定它已经cleanup done了呢？我们需要用一个双向的channel来实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">msgGen</span><span class="params">(name <span class="type">string</span>, done <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> <span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(time.Duration(rand.Intn(<span class="number">2000</span>)) * time.Millisecond):</span><br><span class="line">c &lt;- fmt.Sprintf(<span class="string">&quot;service %s message %d&quot;</span>, name, i)</span><br><span class="line"><span class="keyword">case</span> &lt;-done:</span><br><span class="line">fmt.Println(<span class="string">&quot;cleaning up&quot;</span>)</span><br><span class="line">time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">fmt.Println(<span class="string">&quot;cleanup done&quot;</span>)</span><br><span class="line">done &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeoutWait</span><span class="params">(c <span class="keyword">chan</span> <span class="type">string</span>, timeout time.Duration)</span></span> (<span class="type">string</span>, <span class="type">bool</span>) &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> m := &lt;-c:</span><br><span class="line"><span class="keyword">return</span> m, <span class="literal">true</span></span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(timeout):</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">m1 := msgGen(<span class="string">&quot;1&quot;</span>,done)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> m, ok := timeoutWait(m1, time.Second); ok &#123;</span><br><span class="line">fmt.Println(m)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Timeout&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">done &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&lt;-done</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样才是真正的退出，不是用time.Sleep的退出</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go编程思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go编程思想（九）Goroutine</title>
      <link href="/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E4%B9%9D%EF%BC%89Goroutine/"/>
      <url>/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E4%B9%9D%EF%BC%89Goroutine/</url>
      
        <content type="html"><![CDATA[<h1 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>先来看一段代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Hello form&quot;</span>+<span class="string">&quot;goroutine %d\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们去执行，它会死循环，一直打印同一句话<br>如果我们在func前加一个go，那么它就会并发执行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Hello form&quot;</span>+<span class="string">&quot;goroutine %d\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但结果是：<br><img src="/images/fbd4ed8bbca94d47bb5d226b08ef4367.png" alt="在这里插入图片描述"><br>原因是并发，当main函数结束时，所有都会结束，所以这个func来不及打印，就被kill了</p><p>有了这个条件，我们就可以控制并发的时间<br>在main函数的最后一行下，加上一句<br><code>time.Sleep(time.Millisecond)</code><br>手动控制并发的时间为1毫秒<br>这样就可以打印出来<br><img src="/images/32e870d2d87d4b3ba5124f5352f2811b.png" alt="在这里插入图片描述"><br>十个的话哪种语言都可以，那么我们开大点，开个10000</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Hello form&quot;</span>+<span class="string">&quot;goroutine %d\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/f3606f29f0d84b958baeaf25c82b82a9.png" alt="在这里插入图片描述"><br>它同样也可以执行，所以go开的不是线程，线程开10个，那没问题，开100个，问题不大，但如果开10000个，是不可能的，所以go开的是协程</p><h2 id="协程Coroutine"><a href="#协程Coroutine" class="headerlink" title="协程Coroutine"></a>协程Coroutine</h2><ul><li>轻量级”线程“</li><li>非抢占式多任务处理，由协程主动交出控制权（不会被操作系统所终止）（1.13以及之前的版本）</li><li>编译器&#x2F;解释器&#x2F;虚拟机层面的多任务</li><li>多个协可能在一个或多个线程上运行（由调度器决定）</li></ul><p>现在来解释下非抢占式多任务<br>在我们上面的例子中，表现的结果与抢占式多任务差不多，都是打印到一半会出现别的任务的打印结果，原因是Printf是一个io操作，中间有一个等待的过程，这时就有个节点，可以让协程主动交出控制权<br>那么我们换一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a [<span class="number">10</span>]<span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">a[i]++</span><br><span class="line">runtime.Gosched()</span><br><span class="line">&#125;</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Millisecond)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行这段代码，不同的机器上可能是不一样的结果<br>有些人的机器会出现死机的问题，说明一直卡在死循环中，协程一直没有交出控制权<br>而有些人的机器会正常出结果，比如<br><code>[10378037 10087086 14526038 17136614 16020336 0 23655615 6373257 0 11712709]</code><br>这是为什么呢？<br>原因就在于go的版本<br>在go1.13及以前版本，会死机，而在go1.14的文档中，则出现了这一段话<br><code>Goroutines are now asynchronously preemptible. As a result, loops without function calls no longer potentially deadlock the scheduler or significantly delay garbage collection.</code><br>翻译：<br><code>goroutine现在可以被异步抢占。因此没有函数调用的循环不再对调度器造成死锁或造成垃圾回收的大幅变慢。</code><br>所以，如果我们的go语言版本是1.13及之前的，需要注意手动加上个节点给协程交出控制权的机会<br><code>runtime.Gosched()</code>即可解决死锁问题</p><h1 id="go语言的调度器"><a href="#go语言的调度器" class="headerlink" title="go语言的调度器"></a>go语言的调度器</h1><p><img src="/images/10be9322d53d455b9a5819dd468c0309.png" alt="在这里插入图片描述"><br>普通函数中，main将控制权交给doWork后，直到idoWork执行完毕后，才会把控制权交还给main<br>在协程中，main和doWork是双向的，控制权可以不停的流转，两个协程可以在同一个线程内，也有可能在不同的线程内，我们只需要开两个协程，线程由调度器决定</p><p><img src="/images/8228cb3db6a14c63908af691046183fb.png" alt="在这里插入图片描述"><br>goroutine的定义</p><ul><li>任何函数只需加上go就能送给调度器运行</li><li>不需要定义时区分异步函数</li><li>调度器在合适的点进行切换</li><li>使用 <code>-race</code>来检查数据访问的冲突</li></ul><p>goroutine可能的切换点（参考）</p><ul><li>I&#x2F;O，select</li><li>channel</li><li>等待锁</li><li>函数调用</li><li>runtime.Gosched()</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Go编程思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go编程思想（八）测试与性能调优</title>
      <link href="/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E5%85%AB%EF%BC%89%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
      <url>/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E5%85%AB%EF%BC%89%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="传统测试"><a href="#传统测试" class="headerlink" title="传统测试"></a>传统测试</h2><p><img src="/images/e0f11021e8884fcf9ef553f37c2f5540.png" alt="在这里插入图片描述"></p><ul><li>测试数据和逻辑混合在一起</li><li>出错信息不明确</li><li>一旦一个数据出错测试全部结束</li></ul><h2 id="表格驱动测试"><a href="#表格驱动测试" class="headerlink" title="表格驱动测试"></a>表格驱动测试</h2><p><img src="/images/9594901b561148069dfe63ac54b8be46.png" alt="在这里插入图片描述"></p><ul><li>分离了测试数据和逻辑</li><li>明确的出错信息</li><li>允许部分失败</li><li>go语言的语法使得我们更容易实现表格驱动测试</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>我们来演示一下测试<br>首先先写一个三角函数吧</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calcTriangle</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">var</span> c <span class="type">int</span></span><br><span class="line">c = <span class="type">int</span>(math.Sqrt(<span class="type">float64</span>(a*a + b*b)))</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后新建一个测试文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTriangle</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">tests := []<span class="keyword">struct</span>&#123; a, b, c <span class="type">int</span> &#125;&#123;</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;,</span><br><span class="line">&#123;<span class="number">5</span>, <span class="number">12</span>, <span class="number">13</span>&#125;,</span><br><span class="line">&#123;<span class="number">8</span>, <span class="number">15</span>, <span class="number">17</span>&#125;,</span><br><span class="line">&#123;<span class="number">12</span>, <span class="number">35</span>, <span class="number">37</span>&#125;,</span><br><span class="line">&#123;<span class="number">30000</span>, <span class="number">40000</span>, <span class="number">50000</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line"><span class="keyword">if</span> actual := calcTriangle(tt.a, tt.b); actual != tt.c &#123;</span><br><span class="line">t.Errorf(<span class="string">&quot;calcTriangle(%d, %d); &quot;</span>+</span><br><span class="line"><span class="string">&quot;got %d; expected %d&quot;</span>,</span><br><span class="line">tt.a, tt.b, actual, tt.c)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试结果<br><img src="/images/91f428d2588f4725b1b8716d6995c94a.png" alt="在这里插入图片描述"><br>我们修改一下，人工让一个结果出错<br><img src="/images/e9313f152e6644699c3379987a5516ea.png" alt="在这里插入图片描述"><br>测试符合预期</p><p>用命令行也可以跑<br><code>go test .</code></p><h1 id="代码覆盖率和性能调试"><a href="#代码覆盖率和性能调试" class="headerlink" title="代码覆盖率和性能调试"></a>代码覆盖率和性能调试</h1><p><img src="/images/2094b3dca6ad4e909bbc9a312b1739d6.png" alt="在这里插入图片描述"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSubstr</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">s := <span class="string">&quot;黑化肥挥发发灰会花飞灰化肥挥发发黑会飞花&quot;</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">13</span>; i++ &#123;</span><br><span class="line">s = s + s</span><br><span class="line">&#125;</span><br><span class="line">b.Logf(<span class="string">&quot;len(s) = %d&quot;</span>, <span class="built_in">len</span>(s))</span><br><span class="line">ans := <span class="number">8</span></span><br><span class="line">b.ResetTimer()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">actual := lengthOfNonRepeatingSubStr(s)</span><br><span class="line"><span class="keyword">if</span> actual != ans &#123;</span><br><span class="line">b.Errorf(<span class="string">&quot;got %d for input %s; &quot;</span>+</span><br><span class="line"><span class="string">&quot;expected %d&quot;</span>,</span><br><span class="line">actual, s, ans)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="pprof"><a href="#pprof" class="headerlink" title="pprof"></a>pprof</h1><p><code>go test -bench . -cpuprofile cpu.out</code><br>会在当前目录生成个cpu.out文件<br>我们用pprof查看<br><code> go tool pprof cpu.out</code><br>pprof是个交互式的，可以输入help来查看帮助<br><img src="/images/e3bbd7a1d5174820a829a6f2b3707d29.png" alt="在这里插入图片描述"></p><p>我们输入web，可以自动打开浏览器，查看性能消耗<br><img src="/images/7a54e41157174cd3b6010f931721d129.png" alt="在这里插入图片描述"></p><p>线条越粗，方框越大、红就代表性能消耗越多，可以优化的点也可以从这里找</p><h1 id="服务器测试"><a href="#服务器测试" class="headerlink" title="服务器测试"></a>服务器测试</h1><p>&#x2F;&#x2F;TODO</p><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><p>以下方这个队列包为例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> queue</span><br><span class="line"></span><br><span class="line"><span class="comment">// A FIFO queue.</span></span><br><span class="line"><span class="keyword">type</span> Queue []<span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Pushes the element into the queue.</span></span><br><span class="line"><span class="comment">// e.g. q.Push(123)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Push(v <span class="type">int</span>) &#123;</span><br><span class="line">*q = <span class="built_in">append</span>(*q, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pops element from head.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Pop() <span class="type">int</span> &#123;</span><br><span class="line">head := (*q)[<span class="number">0</span>]</span><br><span class="line">*q = (*q)[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns if the queue is empty or not.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> IsEmpty() <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(*q) == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在终端中输入<code>godoc -http :6060</code><br>在浏览器中输入<code>localhost:6060</code><br>如下图<br><img src="/images/256d15fc76e243269b3ce7a8648d2c4f.png" alt="在这里插入图片描述"><br>里边即可查看</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go编程思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go编程思想（七）服务器错误处理</title>
      <link href="/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E4%B8%83%EF%BC%89%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
      <url>/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E4%B8%83%EF%BC%89%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><strong>TODO</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Go编程思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go编程思想（六）错误处理和资源管理</title>
      <link href="/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E5%85%AD%EF%BC%89%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E5%92%8C%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/"/>
      <url>/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E5%85%AD%EF%BC%89%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E5%92%8C%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="defer调用"><a href="#defer调用" class="headerlink" title="defer调用"></a>defer调用</h1><h2 id="1、确保在函数结束时调用"><a href="#1、确保在函数结束时调用" class="headerlink" title="1、确保在函数结束时调用"></a>1、确保在函数结束时调用</h2><p>先来看个例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tryDefer</span><span class="params">()</span></span>  &#123;</span><br><span class="line">fmt.Println(<span class="number">1</span>)</span><br><span class="line">fmt.Println(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">tryDefer()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面这段代码直接运行，结果很简单<br><code>1</code><br><code>2 </code></p><p>那我们做一些小修改</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tryDefer</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="number">1</span>)</span><br><span class="line">fmt.Println(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">tryDefer()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：<br><code>2</code><br><code>1 </code><br>很明显，defer确保了fmt.Println(1)在main函数结束前运行</p><h2 id="2、defer列表为先进后出"><a href="#2、defer列表为先进后出" class="headerlink" title="2、defer列表为先进后出"></a>2、defer列表为先进后出</h2><p>那我们再做一些修改</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tryDefer</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="number">2</span>)</span><br><span class="line">fmt.Println(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">tryDefer()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>都知道，3会第一个打印，那么1和2哪个先打印呢？<br>答案是：<br><code>3</code><br><code>2</code><br><code>1 </code><br><code>原因是可以把defer看作一个栈，符合先进后出，1先进去，那么1就后出来，所以是3，2，1</code></p><p>那有人就会说了，我直接</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="number">3</span>)</span><br><span class="line">fmt.Println(<span class="number">2</span>)</span><br><span class="line">fmt.Println(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>不久好了<br>可是如果你的函数中间返回了，怎么办，就比如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line">fmt.Println(<span class="number">2</span>)</span><br><span class="line">fmt.Println(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>或者是panci</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="number">3</span>)</span><br><span class="line">panci(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">fmt.Println(<span class="number">2</span>)</span><br><span class="line">fmt.Println(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>所以，defer确保了我们的函数能执行到</p><p>那我们稍微做一些拓展<br>我们用go语言创建一个txt文件，并向内写入东西<br>首先，创建一个文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeFile</span><span class="params">(filename <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">file, err := os.Create(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有创建就一定有关闭文件，为了避免之后忘记，我们就近就可以写defer<br>那么我们就向这个文件中写斐波那契数列吧</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">a, b := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">a, b = b, a+b</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeFile</span><span class="params">(filename <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">file, err := os.Create(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">write := bufio.NewWriter(file)</span><br><span class="line"><span class="keyword">defer</span> write.Flush()</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入斐波那契数列的前20项</span></span><br><span class="line">f := fibonacci()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">20</span>; i++ &#123;</span><br><span class="line">fmt.Fprintln(write, f())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里只是再weite中写入了数据，想要将数据写入文件就要flush一下，所以在上面定义了defer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/2dd0c1459518471ca301dc8f8af9ac51.png" alt="在这里插入图片描述"></p><h2 id="3、参数在defer语句中计算"><a href="#3、参数在defer语句中计算" class="headerlink" title="3、参数在defer语句中计算"></a>3、参数在defer语句中计算</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tryDefer</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i:= <span class="number">0</span>;i &lt; <span class="number">100</span>;i++&#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(i)</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">30</span>&#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;Too Much!!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行这段代码会从30倒序输出，而不是打印30行30出来，这正是因为参数在defer语句中完成了计算</p><h2 id="4、何时使用defer"><a href="#4、何时使用defer" class="headerlink" title="4、何时使用defer"></a>4、何时使用defer</h2><ul><li>Open\Colse</li><li>Lock\Unlock</li><li>PrintHeader\PrintFooter</li><li>…</li></ul><h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><p>先来人工创建一个error</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeFile</span><span class="params">(filename <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">file, err := os.OpenFile(filename,os.O_EXCL|os.O_CREATE,<span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">write := bufio.NewWriter(file)</span><br><span class="line"><span class="keyword">defer</span> write.Flush()</span><br><span class="line"></span><br><span class="line">f := fibonacci()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">20</span>; i++ &#123;</span><br><span class="line">fmt.Fprintln(write, f())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">writeFile(<span class="string">&quot;fib.txt&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面我们已经创建了一个fib.txt，并且现在我们把Create改成了OpenFile，并且添加了参数，导致如果文件已经存在，程序会报错，我们来运行一下<br><img src="/images/1a544c97a85e45388afd3f572fe5ef4c.png" alt="在这里插入图片描述"><br>这是错误，比较难看<br>而我们对此做出一些处理</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeFile</span><span class="params">(filename <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">file, err := os.OpenFile(filename,os.O_EXCL|os.O_CREATE,<span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> pathError,ok := err.(*os.PathError);ok &#123;</span><br><span class="line">fmt.Println(pathError.Err)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;unknown error &quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">write := bufio.NewWriter(file)</span><br><span class="line"><span class="keyword">defer</span> write.Flush()</span><br><span class="line"></span><br><span class="line">f := fibonacci()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">20</span>; i++ &#123;</span><br><span class="line">fmt.Fprintln(write, f())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为：<br><img src="/images/058d3f3c1ea04c7cbc14efc69c353247.png" alt="在这里插入图片描述"><br>这就是错误处理</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go编程思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go编程思想（五）函数式编程</title>
      <link href="/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E4%BA%94%EF%BC%89%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E4%BA%94%EF%BC%89%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p><img src="/images/c0de7e7ca1584db1b2c630117247cf9d.png" alt="在这里插入图片描述"></p><p>举一个例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(v <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(v <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">sum += v</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := adder(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>;i &lt; <span class="number">10</span>;i++&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;1 + 2 + ... + %d = %d\n&quot;</span>,i,a(i))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/images/befe8a57280a402db8f8295e9eb06afd.png" alt="在这里插入图片描述"><br><code> adder函数中的返回值是一个函数体，其中的v是一个参数，同时也是一个局部变量，而我们可以看到，adder函数中的sum实在返回的函数体外定义的，那么它就是一个自由变量，在这个例子中sum是int类型，在其他例子中，这个sum可以是一个结构体或其他类型，也可以一直连接下去，就有了开头的那张图，将所有关系都连接后，这样就构成了闭包。</code></p><h1 id="“正统”的函数式编程"><a href="#“正统”的函数式编程" class="headerlink" title="“正统”的函数式编程"></a>“正统”的函数式编程</h1><p><img src="/images/023fa5e3ed7143f79743ab834864e76a.png" alt="在这里插入图片描述"><br>那以这“正统”的函数式编程，我们adder函数中的sum就带有状态，那有办法将我们的adder函数变“正统”呢？当然是有的。<br>我们把状态放在一个新的函数中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> iAdder <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> (<span class="type">int</span>,iAdder)</span><br></pre></td></tr></table></figure><p>定义一个新的函数，它的第一个返回是它的当前值，第二个返回是它下一个函数，这是一个递归的定义</p><p>新的adder函数就可以这样写</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder2</span><span class="params">(base <span class="type">int</span>)</span></span> iAdder &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(v <span class="type">int</span>)</span></span> (<span class="type">int</span>, iAdder) &#123;</span><br><span class="line"><span class="keyword">return</span> base + v, adder2(base + v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在修改一下main函数就可以了，完整代码如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(v <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(v <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">sum += v</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> iAdder <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> (<span class="type">int</span>, iAdder)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder2</span><span class="params">(base <span class="type">int</span>)</span></span> iAdder &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(v <span class="type">int</span>)</span></span> (<span class="type">int</span>, iAdder) &#123;</span><br><span class="line"><span class="keyword">return</span> base + v, adder2(base + v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := adder2(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">var</span> s <span class="type">int</span></span><br><span class="line">s, a = a(i)</span><br><span class="line">fmt.Printf(<span class="string">&quot;1 + 2 + ... + %d = %d\n&quot;</span>, i, s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果相同</p><h1 id="案例一：斐波那契数列"><a href="#案例一：斐波那契数列" class="headerlink" title="案例一：斐波那契数列"></a>案例一：斐波那契数列</h1><p>简单实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibo</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">a, b := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">a, b = b, a+b</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f:= fibo()</span><br><span class="line"><span class="built_in">println</span>(f())</span><br><span class="line"><span class="built_in">println</span>(f())</span><br><span class="line"><span class="built_in">println</span>(f())</span><br><span class="line"><span class="built_in">println</span>(f())</span><br><span class="line"><span class="built_in">println</span>(f())</span><br><span class="line"><span class="built_in">println</span>(f())</span><br><span class="line"><span class="built_in">println</span>(f())</span><br><span class="line"><span class="built_in">println</span>(f())</span><br><span class="line"><span class="built_in">println</span>(f())</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/2e1d99779f184501acf489d772abd953.png" alt="在这里插入图片描述"><br>“正统”函数式编程实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibo</span><span class="params">()</span></span> intGen &#123;</span><br><span class="line">a, b := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">a, b = b, a+b</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> intGen  <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g intGen)</span></span> Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">next := g()</span><br><span class="line"><span class="keyword">if</span> next &gt; <span class="number">10000</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, io.EOF</span><br><span class="line">&#125;</span><br><span class="line">s:= fmt.Sprintf(<span class="string">&quot;%d\n&quot;</span>,next)</span><br><span class="line"><span class="keyword">return</span> strings.NewReader(s).Read(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printFileContents</span><span class="params">(reader io.Reader)</span></span>  &#123;</span><br><span class="line">scanner := bufio.NewScanner(reader)</span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">fmt.Print(scanner.Text() + <span class="string">&quot; &quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f:= fibo()</span><br><span class="line">printFileContents(f)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这次的改动有点意思，给函数添加了一个接口，其中Read是读文件的函数，这里把斐波那契数列传递进去，由于斐波那契是无限的，所以我们在该函数中定义了一个终止条件，而printFileContents则负责打印，而上面这段代码还有一个小问题，就是我们在Read函数中定义的p是一个byte类型的切片，如果传进去的数值大于了byte的位数，那么就造成了一个读不完的隐患bug，解决方法就是缓存，这里不展开讲。</p><p>运行结果：<br><img src="/images/44fb6dc7242945bd96fe04b2c035698f.png" alt="在这里插入图片描述"></p><h1 id="案例二：使用函数来遍历二叉树"><a href="#案例二：使用函数来遍历二叉树" class="headerlink" title="案例二：使用函数来遍历二叉树"></a>案例二：使用函数来遍历二叉树</h1><p>traversal.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tree</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *Node)</span></span> Traverse() &#123;</span><br><span class="line">node.TraverseFunc(<span class="function"><span class="keyword">func</span><span class="params">(n *Node)</span></span> &#123;</span><br><span class="line">n.Print()</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *Node)</span></span> TraverseFunc(f <span class="function"><span class="keyword">func</span><span class="params">(*Node)</span></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node.Left.TraverseFunc(f)</span><br><span class="line">f(node)</span><br><span class="line">node.Right.TraverseFunc(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *Node)</span></span> TraverseWithChannel() <span class="keyword">chan</span> *Node &#123;</span><br><span class="line">out := <span class="built_in">make</span>(<span class="keyword">chan</span> *Node)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">node.TraverseFunc(<span class="function"><span class="keyword">func</span><span class="params">(node *Node)</span></span> &#123;</span><br><span class="line">out &lt;- node</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">close</span>(out)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>entry.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="comment">//引入traversal</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> myTreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">node *tree.Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(myNode *myTreeNode)</span></span> postOrder() &#123;</span><br><span class="line"><span class="keyword">if</span> myNode == <span class="literal">nil</span> || myNode.node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">left := myTreeNode&#123;myNode.node.Left&#125;</span><br><span class="line">right := myTreeNode&#123;myNode.node.Right&#125;</span><br><span class="line"></span><br><span class="line">left.postOrder()</span><br><span class="line">right.postOrder()</span><br><span class="line">myNode.node.Print()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> root tree.Node</span><br><span class="line"></span><br><span class="line">root = tree.Node&#123;Value: <span class="number">3</span>&#125;</span><br><span class="line">root.Left = &amp;tree.Node&#123;&#125;</span><br><span class="line">root.Right = &amp;tree.Node&#123;<span class="number">5</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">root.Right.Left = <span class="built_in">new</span>(tree.Node)</span><br><span class="line">root.Left.Right = tree.CreateNode(<span class="number">2</span>)</span><br><span class="line">root.Right.Left.SetValue(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">fmt.Print(<span class="string">&quot;In-order traversal: &quot;</span>)</span><br><span class="line">root.Traverse()</span><br><span class="line"></span><br><span class="line">fmt.Print(<span class="string">&quot;My own post-order traversal: &quot;</span>)</span><br><span class="line">myRoot := myTreeNode&#123;&amp;root&#125;</span><br><span class="line">myRoot.postOrder()</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line">nodeCount := <span class="number">0</span></span><br><span class="line">root.TraverseFunc(<span class="function"><span class="keyword">func</span><span class="params">(node *tree.Node)</span></span> &#123;</span><br><span class="line">nodeCount++</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(<span class="string">&quot;Node count:&quot;</span>, nodeCount)</span><br><span class="line"></span><br><span class="line">c := root.TraverseWithChannel()</span><br><span class="line">maxNodeValue := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> node := <span class="keyword">range</span> c &#123;</span><br><span class="line"><span class="keyword">if</span> node.Value &gt; maxNodeValue &#123;</span><br><span class="line">maxNodeValue = node.Value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Max node value:&quot;</span>, maxNodeValue)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：<br><img src="/images/44f2068fd90f46b787fb06cbe3497bd3.png" alt="在这里插入图片描述"></p><h1 id="Go语言闭包优点"><a href="#Go语言闭包优点" class="headerlink" title="Go语言闭包优点"></a>Go语言闭包优点</h1><ul><li>更为自然</li><li>没有Lambda表达式，但有匿名函数</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Go编程思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go编程思想（四）系统常用接口</title>
      <link href="/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E5%9B%9B%EF%BC%89%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3/"/>
      <url>/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E5%9B%9B%EF%BC%89%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>go语言有三大常用的系统接口，Stringer，Reader，Writer。</p><p>Stringer接口</p><p>Stringer接口包含了String方法，它的作用和java的toString一样，我们在打印重写了String方法这个对象的时候，会打印出返回的string值。代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SmallDuck <span class="keyword">struct</span> &#123;</span><br><span class="line">   Foot <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(smallDuck SmallDuck)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;foot is %d&quot;</span>, t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个结构体SmallDuck，它重写了String方法。</p><p>具体的调用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> uglyDuckling UglyDuckling</span><br><span class="line">   uglyDuckling = allDuck&#123;Foot: <span class="number">2</span>&#125;</span><br><span class="line">   intf(<span class="string">&quot;%T %v \n&quot;</span>, uglyDuckling, uglyDuckling)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allDuck foot is 2</span><br></pre></td></tr></table></figure><p>输出的SamllDuck的value为自定义的内容，即String方法返回的值。</p><p>Writer接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">   Write(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go语言的Writer接口定义了一个Write方法，当实现者为文件的时候，通过Write方法可以将byte数组里面内容write进入文件当中。</p><p>Reader接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">   Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Reader接口定义了一个Read方法，当实现者为文件的时候，通过Read方法可以将文件里面的内容写进byte数组当中。除了文件实现了Reader接口和Writer接口外，byte数组，byte切片，网络流相关的也实现了Reader接口。因此，涉及到读写底层的东西，我们传入的是Writer和Reader接口，而不是File。例如fmt包的Fprintf方法和Fscanf方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprintf</span><span class="params">(w io.Writer, format <span class="type">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">   p := newPrinter()</span><br><span class="line">   Printf(format, a)</span><br><span class="line">   n, err = w.Write(p.buf)</span><br><span class="line">   ()</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fscanf</span><span class="params">(r er, format <span class="type">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">s, old := newScanState(r, <span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">n, err = Scanf(format, a)</span><br><span class="line">(old)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的Reader操作例子</p><p>定义读取Reader里面内容的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printContents</span><span class="params">(reader er)</span></span> &#123;</span><br><span class="line">   scanner := canner(reader)</span><br><span class="line">   <span class="keyword">for</span> n() &#123;</span><br><span class="line">      intln(scanner.Text())</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   s := <span class="string">`1</span></span><br><span class="line"><span class="string">        12!!!`</span></span><br><span class="line">   printContents(Reader(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过&#96;&#96;定义一个跨行的字符串，通过Reader()方法将s转为Reader类型，然后调用定义的方法，通过Scanner读取字符打印在控制台上。</p><p>打印的结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">        12!!!</span><br></pre></td></tr></table></figure><p>除了Reader和Writer外，还有组合它们的接口ReadWriter</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ReadWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">   Reader</span><br><span class="line">   Writer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现者只要实现方法即可，具体的组合和调用由使用者决定。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go编程思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go编程思想（三）接口的组合</title>
      <link href="/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%BB%84%E5%90%88/"/>
      <url>/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%BB%84%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>不说废话，直接上代码</p><p>mock</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mock</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Retriever <span class="keyword">struct</span> &#123;</span><br><span class="line">Contents <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Retriever)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(</span><br><span class="line"><span class="string">&quot;Retriever: &#123;Contents=%s&#125;&quot;</span>, r.Contents)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Retriever)</span></span> Post(url <span class="type">string</span>,</span><br><span class="line">form <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">r.Contents = form[<span class="string">&quot;contents&quot;</span>]</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;ok&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Retriever)</span></span> Get(url <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.Contents</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>real</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="built_in">real</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httputil&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Retriever <span class="keyword">struct</span> &#123;</span><br><span class="line">UserAgent <span class="type">string</span></span><br><span class="line">TimeOut   time.Duration</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Retriever)</span></span> Get(url <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">resp, err := http.Get(url)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;error&quot;</span>,err.Error())</span><br><span class="line"><span class="keyword">return</span> <span class="type">string</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result, err := httputil.DumpResponse(</span><br><span class="line">resp, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">resp.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%s&quot;</span>,<span class="string">&quot;err: &quot;</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="type">string</span>(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;imooc.com/ccmouse/learngo/lang/retriever/mock&quot;</span></span><br><span class="line"><span class="string">&quot;imooc.com/ccmouse/learngo/lang/retriever/real&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Retriever <span class="keyword">interface</span> &#123;</span><br><span class="line">Get(url <span class="type">string</span>) <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Poster <span class="keyword">interface</span> &#123;</span><br><span class="line">Post(url <span class="type">string</span>, form <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>) <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;https://www.imooc.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">(r Retriever)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.Get(url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">post</span><span class="params">(poster Poster)</span></span> &#123;</span><br><span class="line">poster.Post(url,</span><br><span class="line"><span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>:   <span class="string">&quot;ccmouse&quot;</span>,</span><br><span class="line"><span class="string">&quot;course&quot;</span>: <span class="string">&quot;golang&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RetrieverPoster <span class="keyword">interface</span> &#123;</span><br><span class="line">Retriever</span><br><span class="line">Poster</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">session</span><span class="params">(s RetrieverPoster)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">s.Post(url, <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;contents&quot;</span>: <span class="string">&quot;another faked imooc.com&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> s.Get(url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> r Retriever</span><br><span class="line"></span><br><span class="line">mockRetriever := mock.Retriever&#123;</span><br><span class="line">Contents: <span class="string">&quot;this is a fake imooc.com&quot;</span>&#125;</span><br><span class="line">r = &amp;mockRetriever</span><br><span class="line">inspect(r)</span><br><span class="line"></span><br><span class="line">r = &amp;<span class="built_in">real</span>.Retriever&#123;</span><br><span class="line">UserAgent: <span class="string">&quot;Mozilla/5.0&quot;</span>,</span><br><span class="line">TimeOut:   time.Minute,</span><br><span class="line">&#125;</span><br><span class="line">inspect(r)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type assertion</span></span><br><span class="line"><span class="keyword">if</span> mockRetriever, ok := r.(*mock.Retriever); ok &#123;</span><br><span class="line">fmt.Println(mockRetriever.Contents)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;r is not a mock retriever&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(</span><br><span class="line"><span class="string">&quot;Try a session with mockRetriever&quot;</span>)</span><br><span class="line">fmt.Println(session(&amp;mockRetriever))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inspect</span><span class="params">(r Retriever)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Inspecting&quot;</span>, r)</span><br><span class="line">fmt.Printf(<span class="string">&quot; &gt; Type:%T Value:%v\n&quot;</span>, r, r)</span><br><span class="line">fmt.Print(<span class="string">&quot; &gt; Type switch: &quot;</span>)</span><br><span class="line"><span class="keyword">switch</span> v := r.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *mock.Retriever:</span><br><span class="line">fmt.Println(<span class="string">&quot;Contents:&quot;</span>, v.Contents)</span><br><span class="line"><span class="keyword">case</span> *<span class="built_in">real</span>.Retriever:</span><br><span class="line">fmt.Println(<span class="string">&quot;UserAgent:&quot;</span>, v.UserAgent)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Go编程思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go编程思想（二）duck typing</title>
      <link href="/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E4%BA%8C%EF%BC%89duck-typing/"/>
      <url>/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E4%BA%8C%EF%BC%89duck-typing/</url>
      
        <content type="html"><![CDATA[<h1 id="duck-typing"><a href="#duck-typing" class="headerlink" title="duck typing"></a>duck typing</h1><p><img src="/images/260c9353082b43aab6e03f68eb613463.png" alt="在这里插入图片描述"><br>图片源自网络</p><p>思考个问题：上图这个大黄鸭是鸭子吗？<br>传统意义上：<br><code>鸭是雁形目鸭科（Anatidae）鸭亚科（Anatinae）水禽的统称，或称真鸭。鸭的体型相对较小，颈短，一些属的嘴要大些。腿位于身体后方（如同天鹅一样），因而步态蹒跚。大多数真鸭（包括由于个体大小和体形原因而被不正确地称为雁的几种鸟）与天鹅、雁不同，具有下列特征：雄鸟每年换羽两次，雌鸟每窝产卵数亦较多，卵壳光滑；腿上覆盖著相搭的鳞片；叫声则显示出某种程度的性别差异。</code>（百度百科）</p><p>从duck typing的角度：</p><ul><li><code>长的像鸭子，那么就是鸭子</code></li><li><code>描述事物的外部行为而非内部结构</code></li><li>严格说go属于结构化类型系统，类似duck typing</li></ul><h1 id="go语言中的duck-typing"><a href="#go语言中的duck-typing" class="headerlink" title="go语言中的duck typing"></a>go语言中的duck typing</h1><ul><li>同时需要可读、可写（接口组装）</li><li>同时具有python、c++的duck typing的灵活性</li><li>同时有java的类型检查</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Go编程思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go编程思想（一）接口</title>
      <link href="/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E4%B8%80%EF%BC%89%E6%8E%A5%E5%8F%A3/"/>
      <url>/2022/09/03/Go%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E4%B8%80%EF%BC%89%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="一-接口"><a href="#一-接口" class="headerlink" title="一. 接口"></a>一. 接口</h1><ul><li>接口解释:接口是一组行为规范的定义.</li><li>接口中只能有方法声明,方法只能有名称、参数、返回值,不能有方法体</li><li>每个接口中可以有多个方法声明,结构体把接口中 <strong>所有</strong> 方法都重写后,结构体就属于接口类型</li><li>Go语言中接口和结构体之间的关系是传统面向对象中is-like-a的关系</li><li>定义接口类型关键字是interface</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> 接口名 <span class="keyword">interface</span>&#123;</span><br><span class="line">  方法名(参数列表) 返回值列表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接口可以继承接口,且Go语言推荐把接口中方法拆分成多个接口</li></ul><h1 id="二-代码示例"><a href="#二-代码示例" class="headerlink" title="二.代码示例"></a>二.代码示例</h1><ul><li>接口中声明完方法,结构体重写接口中方法后,编译器认为结构体实现了接口<ul><li>重写的方法要求必须和接口中方法名称、方法参数(参数名称可以不同)、返回值列表完全相同</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Live <span class="keyword">interface</span> &#123;</span><br><span class="line">run(run <span class="type">int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *People)</span></span> run(run <span class="type">int</span>) &#123;</span><br><span class="line">fmt.Println(p.name, <span class="string">&quot;正在跑步,跑了,&quot;</span>, run, <span class="string">&quot;米&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">peo := People&#123;<span class="string">&quot;张三&quot;</span>, <span class="number">17</span>&#125;</span><br><span class="line">peo.run(<span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果接口中有多个方法声明,接口体必须重写接口中全部方法才任务结构体实现了接口</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Live <span class="keyword">interface</span> &#123;</span><br><span class="line">run(run <span class="type">int</span>)</span><br><span class="line">eat()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *People)</span></span> run(run <span class="type">int</span>) &#123;</span><br><span class="line">fmt.Println(p.name, <span class="string">&quot;正在跑步,跑了,&quot;</span>, run, <span class="string">&quot;米&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *People)</span></span> eat() &#123;</span><br><span class="line">fmt.Println(p.name, <span class="string">&quot;正在吃饭&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">peo := People&#123;<span class="string">&quot;张三&quot;</span>, <span class="number">17</span>&#125;</span><br><span class="line">peo.run(<span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接口可以继承接口(组合),上面代码可以改写成下面代码</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Live <span class="keyword">interface</span> &#123;</span><br><span class="line">run(run <span class="type">int</span>)</span><br><span class="line">Eat</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Eat <span class="keyword">interface</span> &#123;</span><br><span class="line">eat()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *People)</span></span> run(run <span class="type">int</span>) &#123;</span><br><span class="line">fmt.Println(p.name, <span class="string">&quot;正在跑步,跑了,&quot;</span>, run, <span class="string">&quot;米&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *People)</span></span> eat() &#123;</span><br><span class="line">fmt.Println(p.name, <span class="string">&quot;正在吃饭&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">peo := People&#123;<span class="string">&quot;张三&quot;</span>, <span class="number">17</span>&#125;</span><br><span class="line">peo.run(<span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三-tips"><a href="#三-tips" class="headerlink" title="三.tips"></a>三.tips</h1><p>详细可见<a href="https://blog.csdn.net/weixin_52224421/article/details/125090915">接口的概念</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Go编程思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础（十八）包和封装</title>
      <link href="/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%E5%8C%85%E5%92%8C%E5%B0%81%E8%A3%85/"/>
      <url>/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%E5%8C%85%E5%92%8C%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>可以看这篇<br><a href="https://blog.csdn.net/weixin_52224421/article/details/124934320">Go语言的包和封装</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Go基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础（十七）依赖管理</title>
      <link href="/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/"/>
      <url>/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>看这篇<br><a href="https://blog.csdn.net/weixin_52224421/article/details/124991216">Go语言的依赖管理</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Go基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础（十六）结构体</title>
      <link href="/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <url>/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h1 id="一-结构体"><a href="#一-结构体" class="headerlink" title="一.结构体"></a>一.结构体</h1><ul><li>结构体解释:将一个或多个变量组合到一起,形成新的类型.这个类型就是结构体</li><li>Go语言中的结构体和C++结构体有点类似,而Java或C#中类本质就是结构体</li><li>结构体是值类型</li><li>结构体定义语法<ul><li>通过语法可以看出,Go语言发明者明确认为结构体就是一种自定义类型</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type 结构体名称 struct&#123;</span><br><span class="line">  名称 类型//成员或属性</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二-代码示例"><a href="#二-代码示例" class="headerlink" title="二. 代码示例"></a>二. 代码示例</h1><ul><li>定义结构体<ul><li>结构体可以定义在函数内部或函数外部(与普通变量一样),定义位置影响到结构体的访问范围</li><li>如果结构体定义在函数外面,结构体名称首字母是否大写影响到结构体是否能跨包访问</li><li>如果结构体能跨包访问,属性首字母是否大写影响到属性是否跨包访问</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明结构体变量<ul><li>由于结构体是值类型,所以声明后就会开辟内存空间</li><li>所有成员为类型对应的初始值</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> peo People</span><br><span class="line">fmt.Print(peo)<span class="comment">//输出:&#123;0 &#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p&quot;</span>,&amp;peo)<span class="comment">//会打印内存地址值</span></span><br></pre></td></tr></table></figure><ul><li>可以直接给结构体多个属性赋值</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> peo People</span><br><span class="line"><span class="comment">//按照结构体中属性的顺序进行赋值,可以省略属性名称</span></span><br><span class="line">peo = People&#123;<span class="string">&quot;smallming&quot;</span>, <span class="number">17</span>&#125;</span><br><span class="line">fmt.Println(peo)</span><br><span class="line"><span class="comment">//明确指定给哪些属性赋值.可以都赋值,也可以只给其中一部分赋值</span></span><br><span class="line">peo = People&#123;Age: <span class="number">18</span>, Name: <span class="string">&quot;佳明哥&quot;</span>&#125;</span><br><span class="line">fmt.Println(peo)</span><br></pre></td></tr></table></figure><ul><li>也可以通过结构体变量名称获取到属性进行赋值或查看</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var peo People</span><br><span class="line">peo.Name=&quot;smallming&quot;</span><br><span class="line">peo.Age=17</span><br><span class="line">fmt.Println(peo)</span><br><span class="line">fmt.Println(peo.Name)</span><br><span class="line">fmt.Println(peo.Age)</span><br></pre></td></tr></table></figure><h1 id="三-判断"><a href="#三-判断" class="headerlink" title="三.判断"></a>三.判断</h1><ul><li>双等(&#x3D;&#x3D;)判断结构体中内容是否相等</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p1 := People&#123;<span class="string">&quot;smallming&quot;</span>, <span class="number">17</span>&#125;</span><br><span class="line">p2 := People&#123;<span class="string">&quot;smallming&quot;</span>, <span class="number">17</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%p %p\n&quot;</span>, &amp;p1, &amp;p2) <span class="comment">//输出地址不同</span></span><br><span class="line">fmt.Println(p1 == p2)           <span class="comment">//输出:true</span></span><br></pre></td></tr></table></figure><h1 id="四-结构体指针"><a href="#四-结构体指针" class="headerlink" title="四.结构体指针"></a>四.结构体指针</h1><ul><li>由于结构体是值类型,在方法传递时希望传递结构体地址,可以使用时结构体指针完成</li><li>可以结合new(T)函数创建结构体指针</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">peo := <span class="built_in">new</span>(People)</span><br><span class="line"><span class="comment">//因为结构体本质是值类型,所以创建结构体指针时已经开辟了内存空间</span></span><br><span class="line">fmt.Println(peo == <span class="literal">nil</span>) <span class="comment">//输出:false</span></span><br><span class="line"><span class="comment">//由于结构体中属性并不是指针类型,所以可以直接调用</span></span><br><span class="line">peo.Name = <span class="string">&quot;smallming&quot;</span></span><br><span class="line">fmt.Println(peo)<span class="comment">//输出:&amp;&#123;smallming 0&#125;</span></span><br><span class="line">peo1:=peo</span><br><span class="line">peo1.Name=<span class="string">&quot;佳明哥&quot;</span></span><br><span class="line">fmt.Println(peo1,peo)<span class="comment">//输出:&amp;&#123;佳明哥 0&#125; &amp;&#123;佳明哥 0&#125;</span></span><br></pre></td></tr></table></figure><ul><li>如果不想使用new(T)函数,可以直接声明结构体指针并赋值</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明结构体指针</span></span><br><span class="line"><span class="keyword">var</span> peo *People</span><br><span class="line"><span class="comment">//给结构体指针赋值</span></span><br><span class="line">peo = &amp;People&#123;<span class="string">&quot;smallming&quot;</span>, <span class="number">17</span>&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">上面代码使用短变量方式如下</span></span><br><span class="line"><span class="comment">peo:= &amp;People&#123;&quot;smallming&quot;, 17&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fmt.Println(peo)</span><br></pre></td></tr></table></figure><h1 id="五-判断"><a href="#五-判断" class="headerlink" title="五.判断"></a>五.判断</h1><ul><li>结构体指针比较的是地址</li><li>(*结构体指针)取出地址中对应的值</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">p1 := People&#123;<span class="string">&quot;smallming&quot;</span>, <span class="number">17</span>&#125;</span><br><span class="line">p2 := People&#123;<span class="string">&quot;smallming&quot;</span>, <span class="number">17</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%p %p\n&quot;</span>, &amp;p1, &amp;p2) <span class="comment">//输出地址不同</span></span><br><span class="line">fmt.Println(p1 == p2)           <span class="comment">//输出:true</span></span><br><span class="line"></span><br><span class="line">p3 := <span class="built_in">new</span>(People)</span><br><span class="line">p3 = &amp;People&#123;<span class="string">&quot;smallming&quot;</span>, <span class="number">17</span>&#125;</span><br><span class="line"><span class="comment">//结构体变量不能和指针比较,使用*指针取出地址中值</span></span><br><span class="line">fmt.Println(p1 == *p3) <span class="comment">//输出:true</span></span><br><span class="line"></span><br><span class="line">p4 := &amp;People&#123;<span class="string">&quot;smallming&quot;</span>, <span class="number">17</span>&#125;</span><br><span class="line"><span class="comment">//指针比较的是地址</span></span><br><span class="line">fmt.Println(p3 == p4) <span class="comment">//输出:false</span></span><br></pre></td></tr></table></figure><h1 id="六-tips"><a href="#六-tips" class="headerlink" title="六.tips"></a>六.tips</h1><p>关于结构体的知识可以去看这个：<a href="https://blog.csdn.net/weixin_52224421/article/details/124808593">GO结构体</a></p><h1 id="七-练习"><a href="#七-练习" class="headerlink" title="七.练习"></a>七.练习</h1><p>这次的练习我们来实现一个二叉树<br>首先就是对树的节点进行结构体定义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">Value       <span class="type">int</span></span><br><span class="line">Left, Right *Node</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建、打印、赋值、遍历函数如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateNode</span><span class="params">(value <span class="type">int</span>)</span></span> *Node &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Node&#123;Value: value&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node Node)</span></span> Print() &#123;</span><br><span class="line">fmt.Print(node.Value, <span class="string">&quot; &quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print2</span><span class="params">(node Node)</span></span> &#123;</span><br><span class="line">fmt.Print(node.Value, <span class="string">&quot; &quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *Node)</span></span> SetValue(value <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Setting value to the nil node &quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">node.Value = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *Node)</span></span> Traverse() &#123;</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">node.Left.Traverse()</span><br><span class="line">node.Print()</span><br><span class="line">node.Right.Traverse()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将这些方法和结构体进行闭包处理</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//node.go</span></span><br><span class="line"><span class="keyword">package</span> tree</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">Value       <span class="type">int</span></span><br><span class="line">Left, Right *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateNode</span><span class="params">(value <span class="type">int</span>)</span></span> *Node &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Node&#123;Value: value&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node Node)</span></span> Print() &#123;</span><br><span class="line">fmt.Print(node.Value, <span class="string">&quot; &quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print2</span><span class="params">(node Node)</span></span> &#123;</span><br><span class="line">fmt.Print(node.Value, <span class="string">&quot; &quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *Node)</span></span> SetValue(value <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Setting value to the nil node &quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">node.Value = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *Node)</span></span> Traverse() &#123;</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">node.Left.Traverse()</span><br><span class="line">node.Print()</span><br><span class="line">node.Right.Traverse()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结构如下</p><p><img src="/images/d707e9c2556b44e2b885e8202d8ca874.png" alt="在这里插入图片描述"><br>在entry.go中我们先定义结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> myTreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">*tree.Node</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行前序遍历的函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(myNode *myTreeNode)</span></span> postOrder() &#123;</span><br><span class="line"><span class="keyword">if</span> myNode == <span class="literal">nil</span> || myNode.Node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">left := myTreeNode&#123;myNode.Left&#125;</span><br><span class="line">left.postOrder()</span><br><span class="line">right := myTreeNode&#123;myNode.Right&#125;</span><br><span class="line">right.postOrder()</span><br><span class="line">myNode.Print()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;RentACoolCar/tree&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> myTreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">*tree.Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(myNode *myTreeNode)</span></span> postOrder() &#123;</span><br><span class="line"><span class="keyword">if</span> myNode == <span class="literal">nil</span> || myNode.Node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">left := myTreeNode&#123;myNode.Left&#125;</span><br><span class="line">left.postOrder()</span><br><span class="line">right := myTreeNode&#123;myNode.Right&#125;</span><br><span class="line">right.postOrder()</span><br><span class="line">myNode.Print()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(myNode *myTreeNode)</span></span> Traverse() &#123;</span><br><span class="line">fmt.Print(<span class="string">&quot;This is a shadowed of Traverse&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//var root tree.Node</span></span><br><span class="line"><span class="comment">/*root = tree.TreeNode&#123;</span></span><br><span class="line"><span class="comment">value: 3,</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">root.left = &amp;tree.TreeNode&#123;&#125;</span></span><br><span class="line"><span class="comment">root.right = &amp;tree.TreeNode&#123;5, nil, nil&#125;</span></span><br><span class="line"><span class="comment">nodes := []tree.TreeNode&#123;</span></span><br><span class="line"><span class="comment">&#123;value: 3&#125;,</span></span><br><span class="line"><span class="comment">&#123;6, nil, &amp;root&#125;,</span></span><br><span class="line"><span class="comment">&#123;&#125;,</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">root.left.right = createNode(2)</span></span><br><span class="line"><span class="comment">fmt.Println(nodes)</span></span><br><span class="line"><span class="comment">fmt.Println(root.left.right.value)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">root.print()</span></span><br><span class="line"><span class="comment">fmt.Println()</span></span><br><span class="line"><span class="comment">print2(root)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">root.right.left = new(tree.TreeNode)</span></span><br><span class="line"><span class="comment">root.right.left.setValue(3)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">proot := &amp;root</span></span><br><span class="line"><span class="comment">proot.setValue(100)</span></span><br><span class="line"><span class="comment">proot.print()</span></span><br><span class="line"><span class="comment">proot.setValue(300)</span></span><br><span class="line"><span class="comment">proot.print()*/</span> <span class="comment">/*</span></span><br><span class="line"><span class="comment">var Rrot *tree.TreeNode</span></span><br><span class="line"><span class="comment">Rrot.setValue(200)</span></span><br><span class="line"><span class="comment">Rrot = &amp;root</span></span><br><span class="line"><span class="comment">Rrot.setValue(300)</span></span><br><span class="line"><span class="comment">Rrot.print()*/</span></span><br><span class="line"></span><br><span class="line">root := myTreeNode&#123;&amp;tree.Node&#123;Value: <span class="number">3</span>&#125;&#125;</span><br><span class="line">root.Left = &amp;tree.Node&#123;&#125;</span><br><span class="line">root.Right = &amp;tree.Node&#123;<span class="number">5</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">root.Right.Left = <span class="built_in">new</span>(tree.Node)</span><br><span class="line">root.Left.Right = tree.CreateNode(<span class="number">2</span>)</span><br><span class="line">root.Right.Left.SetValue(<span class="number">0</span>)</span><br><span class="line">root.Node.Traverse()</span><br><span class="line">fmt.Println()</span><br><span class="line">root.Traverse()</span><br><span class="line">fmt.Println()</span><br><span class="line">root.postOrder()</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Go基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础（十五）字符</title>
      <link href="/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E5%AD%97%E7%AC%A6/"/>
      <url>/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E5%AD%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="一-字符串概述"><a href="#一-字符串概述" class="headerlink" title="一.字符串概述"></a>一.字符串概述</h1><ul><li>字符串是一段不可变的字符序列.内容是任意内容,可以是一段文字也可以是一串数字,但是字符串类型数字不能进行数学运算,必须转换成整型或浮点型</li><li>字符串类型关键字:string</li><li>创建字符串类型变量</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s <span class="type">string</span> = <span class="string">&quot;smallming&quot;</span></span><br><span class="line">s1 := <span class="string">&quot;smallming&quot;</span></span><br></pre></td></tr></table></figure><ul><li>字符串类型的值使用双引号””扩上,内容支持转义字符串.两侧使用反单引号时原格式输出</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="string">&quot;a\tbc&quot;</span></span><br><span class="line">b := <span class="string">`a\tbc`</span></span><br><span class="line">fmt.Println(a) <span class="comment">//输出:aabc</span></span><br><span class="line">fmt.Println(b) <span class="comment">//输出a\tabc</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二-字符串和数值转换"><a href="#二-字符串和数值转换" class="headerlink" title="二.字符串和数值转换"></a>二.字符串和数值转换</h1><ul><li>包strconv提供了字符串和其他类型相互转换的函数,下面以字符串和数值类型转换为例</li><li>int和string相互转换</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">&quot;11&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第一个参数:需要转换的字符串变量</span></span><br><span class="line"><span class="comment">第二个参数:这个数字是几进制,常用取值:2,8,10,16</span></span><br><span class="line"><span class="comment">第三个参数:认为这个数字的整数类型.可取值:0,8,16,32,64.</span></span><br><span class="line"><span class="comment">但是由于方法最后返回值是int64,所以第三个参数无论设置什么最终结果都是int64</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">i, _ := strconv.ParseInt(s, <span class="number">10</span>, <span class="number">8</span>)</span><br><span class="line">fmt.Println(i)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, i)</span><br><span class="line"></span><br><span class="line"><span class="comment">//简单写法,相当于strconv.ParseInt(s,10,64)</span></span><br><span class="line">i1, _ := strconv.Atoi(s)</span><br><span class="line">fmt.Println(i1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Int转换成string</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">11</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第一个参数:必须是int64类型</span></span><br><span class="line"><span class="comment">第二个参数:进制数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">s := strconv.FormatInt(<span class="type">int64</span>(i), <span class="number">10</span>)</span><br><span class="line">fmt.Println(s)        <span class="comment">//输出:11</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, s) <span class="comment">//输出:string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">由于平时常用int,且使用短变量时整数默认是int类型</span></span><br><span class="line"><span class="comment">所以下面方式较常用,把int转换为string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">s1 := strconv.Itoa(i)</span><br><span class="line">fmt.Println(s1)      <span class="comment">//输出:11</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T&quot;</span>, s1) <span class="comment">//输出:string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>string转换为floatXX类型</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">&quot;1.5&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">把字符串转换为指定类型</span></span><br><span class="line"><span class="comment">第一个参数:字符串</span></span><br><span class="line"><span class="comment">第二个参数:可取值为32和64,分别表示float32和float64</span></span><br><span class="line"><span class="comment">返回值是float64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">f, _ := strconv.ParseFloat(s, <span class="number">64</span>)</span><br><span class="line">fmt.Println(f)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T&quot;</span>, f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>floatXX转换为string类型</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f := <span class="number">1.5</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">把浮点型转换为字符串类型</span></span><br><span class="line"><span class="comment">第一个参数:浮点型变量</span></span><br><span class="line"><span class="comment">第二个参数:</span></span><br><span class="line"><span class="comment">&#x27;f&#x27;（-ddd.dddd）</span></span><br><span class="line"><span class="comment">&#x27;b&#x27;（-ddddp±ddd，指数为二进制）</span></span><br><span class="line"><span class="comment">&#x27;e&#x27;（-d.dddde±dd，十进制指数）</span></span><br><span class="line"><span class="comment">&#x27;E&#x27;（-d.ddddE±dd，十进制指数）</span></span><br><span class="line"><span class="comment">&#x27;g&#x27;（指数很大时用&#x27;e&#x27;格式，否则&#x27;f&#x27;格式）</span></span><br><span class="line"><span class="comment">&#x27;G&#x27;（指数很大时用&#x27;E&#x27;格式，否则&#x27;f&#x27;格式）</span></span><br><span class="line"><span class="comment">第三个参数:小数点精度,精度不够使用0补全,超出精度四舍五入</span></span><br><span class="line"><span class="comment">第四个参数:浮点型变量类型,64表示float64,32表示float32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">s := strconv.FormatFloat(f, <span class="string">&#x27;g&#x27;</span>, <span class="number">5</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="三-字符串截取"><a href="#三-字符串截取" class="headerlink" title="三.字符串截取"></a>三.字符串截取</h1><ul><li>可以使用**len(字符串变量)**获取字符串的字节长度,其中英文占1个字节长度,中文占用3个字节长度</li><li>可以使用**变量名[n]**获取到字符串第n+1个字节,返回这个字节对应的Unicode码值(uint8类型).注意n的取值范围是[0,长度)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">&quot;smallming张&quot;</span></span><br><span class="line">a := s[<span class="number">0</span>]</span><br><span class="line">fmt.Println(a)        <span class="comment">//输出:115</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, a) <span class="comment">//输出uint8</span></span><br><span class="line">b := fmt.Sprintf(<span class="string">&quot;%c&quot;</span>, a)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, b) <span class="comment">//输出:string</span></span><br><span class="line">fmt.Println(b)        <span class="comment">//输出s</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以使用变量名[n:m]取出大于等于n小于m的字符序列<ul><li>n和m都可以省略,省略时认为n为0,m为长度</li><li>因为中文占用三个字节,如果没有把中文完整取出,会出现乱码</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">&quot;smallming张&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s)) <span class="comment">//输出:12,字节长度</span></span><br><span class="line">fmt.Println(s[<span class="number">1</span>:<span class="number">4</span>]) <span class="comment">//输出:mal</span></span><br><span class="line">fmt.Println(s[:<span class="number">2</span>])  <span class="comment">//输出:sm</span></span><br><span class="line">fmt.Println(s[<span class="number">5</span>:])  <span class="comment">//输出:ming张</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以通过把字符串转换为切片获取长度,并获取里面内容. 也可以直接使用for循环结合range获取</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">&quot;smallming张&quot;</span></span><br><span class="line">s1 := []<span class="type">rune</span>(s)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s1))    <span class="comment">//输出:10</span></span><br><span class="line">fmt.Println(s1[<span class="number">9</span>])      <span class="comment">//输出24352</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%c&quot;</span>, s1[<span class="number">9</span>]) <span class="comment">//输出:张</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历字符串中内容</span></span><br><span class="line"><span class="keyword">for</span> i, n := <span class="keyword">range</span> s &#123;</span><br><span class="line">fmt.Println(i, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-常用函数"><a href="#四-常用函数" class="headerlink" title="四.常用函数"></a>四.常用函数</h1><ul><li>在strings包中提供了字符串常用的函数</li><li>常用函数整理如下</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">&quot;smallming&quot;</span></span><br><span class="line"><span class="comment">//第一次出现的索引</span></span><br><span class="line">fmt.Println(strings.Index(s, <span class="string">&quot;l&quot;</span>))</span><br><span class="line"><span class="comment">//最后一次出现的索引</span></span><br><span class="line">fmt.Println(strings.LastIndex(s, <span class="string">&quot;l&quot;</span>))</span><br><span class="line"><span class="comment">//是否以指定内容开头</span></span><br><span class="line">fmt.Println(strings.HasPrefix(s, <span class="string">&quot;small&quot;</span>))</span><br><span class="line"><span class="comment">//是否以指定内容结尾</span></span><br><span class="line">fmt.Println(strings.HasSuffix(s, <span class="string">&quot;ming&quot;</span>))</span><br><span class="line"><span class="comment">//是否包含指定字符串</span></span><br><span class="line">fmt.Println(strings.Contains(s, <span class="string">&quot;mi&quot;</span>))</span><br><span class="line"><span class="comment">//全变小写</span></span><br><span class="line">fmt.Println(strings.ToLower(s))</span><br><span class="line"><span class="comment">//全大写</span></span><br><span class="line">fmt.Println(strings.ToUpper(s))</span><br><span class="line"><span class="comment">//把字符串中前n个old子字符串替换成new字符串,如果n小于0表示全部替换.</span></span><br><span class="line"><span class="comment">//如果n大于old个数也表示全部替换</span></span><br><span class="line">fmt.Println(strings.Replace(s, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="number">-1</span>))</span><br><span class="line"><span class="comment">//把字符串重复count遍</span></span><br><span class="line">fmt.Println(strings.Repeat(s, <span class="number">2</span>))</span><br><span class="line"><span class="comment">//去掉字符串前后指定字符</span></span><br><span class="line">fmt.Println(strings.Trim(s, <span class="string">&quot; &quot;</span>)) <span class="comment">//去空格可以使用strings.TrimSpace(s)</span></span><br><span class="line"><span class="comment">//根据指定字符把字符串拆分成切片</span></span><br><span class="line">fmt.Println(strings.Split(s, <span class="string">&quot;m&quot;</span>))</span><br><span class="line"><span class="comment">//使用指定分隔符把切片内容合并成字符串</span></span><br><span class="line">arr := []<span class="type">string</span>&#123;<span class="string">&quot;small&quot;</span>, <span class="string">&quot;ming&quot;</span>&#125;</span><br><span class="line">fmt.Println(strings.Join(arr, <span class="string">&quot;&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五-练习"><a href="#五-练习" class="headerlink" title="五.练习"></a>五.练习</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;unicode/utf8&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">&quot;深圳技术大学yyds！&quot;</span> <span class="comment">//utf-8编码,英文一字节，中文三字节</span></span><br><span class="line">fmt.Println(s)</span><br><span class="line"><span class="keyword">for</span> _, b := <span class="keyword">range</span> []<span class="type">byte</span>(s) &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%X &quot;</span>, b)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line"><span class="keyword">for</span> i, ch := <span class="keyword">range</span> s &#123; <span class="comment">//ch is a rune,int32 为 rune 的一个别名</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;(%d %X) &quot;</span>, i, ch)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">fmt.Println(<span class="string">&quot;Rune count:&quot;</span>, utf8.RuneCountInString(s))</span><br><span class="line">bytes := []<span class="type">byte</span>(s)</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(bytes) &gt; <span class="number">0</span> &#123;</span><br><span class="line">ch, size := utf8.DecodeRune(bytes)</span><br><span class="line">bytes = bytes[size:]</span><br><span class="line">fmt.Printf(<span class="string">&quot;%c &quot;</span>, ch)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, ch := <span class="keyword">range</span> []<span class="type">rune</span>(s) &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;(%d %c) &quot;</span>, i, ch)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/4c8523c4b8474f01a36a5fbb2f3a5c18.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Go基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础（十四）map</title>
      <link href="/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89map/"/>
      <url>/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89map/</url>
      
        <content type="html"><![CDATA[<h1 id="一-map"><a href="#一-map" class="headerlink" title="一. map"></a>一. map</h1><ul><li><p>map以散列表方式存储键值对集合</p></li><li><p>map中每个元素都是键值对</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map[key]Value</span><br></pre></td></tr></table></figure><ul><li>key是操作map的唯一标准.可以通过key对map中元素进行增加&#x2F;删除&#x2F;修改&#x2F;查看</li><li>key是唯一的,添加重复的key会覆盖之前的元素.</li><li>map是值类型,只声明时为空指针(nil)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line">fmt.Println(m == <span class="literal">nil</span>) <span class="comment">//输出:true</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p&quot;</span>, m)   <span class="comment">//输出:0x0</span></span><br></pre></td></tr></table></figure><ul><li>map读写数据时并不是并发安全的,可以结合RWMutex保证并发安全(RWMutex在后面讲解)</li></ul><h1 id="二-实例化map的几种方式"><a href="#二-实例化map的几种方式" class="headerlink" title="二.实例化map的几种方式"></a>二.实例化map的几种方式</h1><ul><li>使用make函数实例化一个没有初始值的map</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">fmt.Println(m==<span class="literal">nil</span>)<span class="comment">//输出:false</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p&quot;</span>, m)<span class="comment">//输出:内存地址</span></span><br></pre></td></tr></table></figure><ul><li>可以在声明map时直接给map赋初始值.注意初始值在一行和在多行写时的语法区别<ul><li>map中元素键值对语法满足: key:value</li><li>key和value的类型必须和map[key]value类型严格对应</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;smallming&quot;</span>, <span class="string">&quot;address&quot;</span>: <span class="string">&quot;北京海淀&quot;</span>&#125;</span><br><span class="line">m1 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>:     <span class="string">&quot;smallming&quot;</span>,</span><br><span class="line"><span class="string">&quot;addresss&quot;</span>: <span class="string">&quot;北京海淀&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(m, m1)</span><br></pre></td></tr></table></figure><h1 id="三-操作map中的元素"><a href="#三-操作map中的元素" class="headerlink" title="三.操作map中的元素"></a>三.操作map中的元素</h1><ul><li>使用key判断,如果key不存在向map中新增数据,如果key存在会覆盖map中元素</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">m[<span class="string">&quot;money&quot;</span>] = <span class="number">5</span></span><br><span class="line">fmt.Println(m) <span class="comment">//输出:map[money:5]</span></span><br><span class="line">m[<span class="string">&quot;money&quot;</span>] = <span class="number">6</span></span><br><span class="line">fmt.Println(m) <span class="comment">//map[money:6]</span></span><br></pre></td></tr></table></figure><ul><li>Go语言标准库中提供了对map元素删除的函数,使用顶层delete()即可完成删除<ul><li>如果key存在执行删除元素</li><li>如果key不存在,map中内容不变,也不会有错误</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">m[<span class="string">&quot;money&quot;</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">delete</span>(m, <span class="string">&quot;没有的key&quot;</span>)</span><br><span class="line">fmt.Println(m) <span class="comment">//输出:map[money:5]</span></span><br><span class="line"><span class="built_in">delete</span>(m, <span class="string">&quot;money&quot;</span>)</span><br><span class="line">fmt.Println(m) <span class="comment">//输出:map[]</span></span><br></pre></td></tr></table></figure><ul><li>获取map中指定key对应的值<ul><li>使用:map变量[key]获取key对应的值</li><li>如果key不存在返回map[key]Value中Value类型的默认值.例如:Value是string类型就返回””</li><li>返回值可以是一个,也可以是两个.<ul><li>一个表示key对应的值</li><li>两个分别表示:key对应的值和这个key是否存在</li></ul></li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;smallming&quot;</span>, <span class="string">&quot;address&quot;</span>: <span class="string">&quot;北京海淀&quot;</span>&#125;</span><br><span class="line">fmt.Println(m[<span class="string">&quot;name&quot;</span>]) <span class="comment">//输出:smallming</span></span><br><span class="line">fmt.Println(m[<span class="string">&quot;age&quot;</span>])  <span class="comment">//输出:空字符串</span></span><br><span class="line">value, ok := m[<span class="string">&quot;age&quot;</span>]</span><br><span class="line">fmt.Println(value, ok) <span class="comment">//输出:空字符串 false</span></span><br></pre></td></tr></table></figure><ul><li>如果希望把map中所有元素都遍历,可以使用for结合range实现</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;smallming&quot;</span>, <span class="string">&quot;address&quot;</span>: <span class="string">&quot;北京海淀&quot;</span>&#125;</span><br><span class="line"><span class="comment">//range遍历map时返回值分别表示key和value</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">fmt.Println(key, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-练习"><a href="#四-练习" class="headerlink" title="四.练习"></a>四.练习</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="number">1</span>: <span class="string">&quot;小红&quot;</span>,</span><br><span class="line"><span class="number">2</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line"><span class="number">3</span>: <span class="string">&quot;小刚&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>) <span class="comment">//m2 == empty map</span></span><br><span class="line"><span class="keyword">var</span> m3 <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>      <span class="comment">//m3 == nil</span></span><br><span class="line">fmt.Println(m)</span><br><span class="line">fmt.Println(m2)</span><br><span class="line">fmt.Println(m3)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;-------------&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">fmt.Println(k, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;------&quot;</span>)</span><br><span class="line">name, ok := m[<span class="number">1</span>]</span><br><span class="line">fmt.Println(name, ok)</span><br><span class="line">name2, ok := m[<span class="number">4</span>]</span><br><span class="line">fmt.Println(name2, ok)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;del&quot;</span>)</span><br><span class="line">name2, ok2 := m[<span class="number">1</span>]</span><br><span class="line">fmt.Println(name2, ok2)</span><br><span class="line"><span class="built_in">delete</span>(m, <span class="number">1</span>)</span><br><span class="line">fmt.Println(m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/52a5002d4caf422e95f4d806c8697499.png" alt="在这里插入图片描述"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v len = %d,cap = %d\n&quot;</span>, s, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s []<span class="type">int</span> <span class="comment">//zero value for slice is nil</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">printSlice(s)</span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">2</span>*i+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(s)</span><br><span class="line"></span><br><span class="line">s1 := []<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;</span><br><span class="line">printSlice(s1)</span><br><span class="line"></span><br><span class="line">s2 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">16</span>)</span><br><span class="line">s3 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">10</span>, <span class="number">32</span>)</span><br><span class="line">printSlice(s2)</span><br><span class="line">printSlice(s3)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Copying slice&quot;</span>)</span><br><span class="line"><span class="built_in">copy</span>(s2, s1)</span><br><span class="line">printSlice(s2)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;删除元素:&quot;</span>)</span><br><span class="line">s2 = <span class="built_in">append</span>(s2[:<span class="number">3</span>], s2[<span class="number">4</span>:]...)</span><br><span class="line">printSlice(s2)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Popping from front&quot;</span>)</span><br><span class="line">front := s2[<span class="number">0</span>]</span><br><span class="line">s2 = s2[<span class="number">1</span>:]</span><br><span class="line">fmt.Println(<span class="string">&quot;back&quot;</span>)</span><br><span class="line">tail := s2[<span class="built_in">len</span>(s2)<span class="number">-1</span>]</span><br><span class="line">s2 = s2[:<span class="built_in">len</span>(s2)<span class="number">-1</span>]</span><br><span class="line">fmt.Println(front, tail)</span><br><span class="line">printSlice(s2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//剑指offer Ⅱ 016 不含重复字符的最长子字符串</span></span><br><span class="line"><span class="comment">//题目</span></span><br><span class="line"><span class="comment">//给定一个字符串 s ，请你找出其中不含有重复字符的 最长连续子字符串 的长度。</span></span><br><span class="line"><span class="comment">//例如：abcabcbb -&gt; abc</span></span><br><span class="line"><span class="comment">//   bbbbbbbb -&gt; b</span></span><br><span class="line"><span class="comment">//   pwwkew  -&gt; wke</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此版本不能处理中文</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">lastOccurred := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>)</span><br><span class="line">start := <span class="number">0</span></span><br><span class="line">maxLength := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i, ch := <span class="keyword">range</span> []<span class="type">byte</span>(s) &#123;</span><br><span class="line"><span class="keyword">if</span> lastI, ok := lastOccurred[ch]; ok &amp;&amp; lastI &gt;= start &#123;</span><br><span class="line">start = lastI + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> i-start+<span class="number">1</span> &gt; maxLength &#123;</span><br><span class="line">maxLength = i - start + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">lastOccurred[ch] = i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxLength</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中文支持</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLongestSubstring2</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">lastOccurred := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">rune</span>]<span class="type">int</span>)</span><br><span class="line">start := <span class="number">0</span></span><br><span class="line">maxLength := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i, ch := <span class="keyword">range</span> []<span class="type">rune</span>(s) &#123;</span><br><span class="line"><span class="keyword">if</span> lastI, ok := lastOccurred[ch]; ok &amp;&amp; lastI &gt;= start &#123;</span><br><span class="line">start = lastI + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> i-start+<span class="number">1</span> &gt; maxLength &#123;</span><br><span class="line">maxLength = i - start + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">lastOccurred[ch] = i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxLength</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> word <span class="type">string</span></span><br><span class="line">fmt.Scanln(&amp;word)</span><br><span class="line">fmt.Println(lengthOfLongestSubstring(word))</span><br><span class="line">fmt.Println(lengthOfLongestSubstring2(word))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="五-tip"><a href="#五-tip" class="headerlink" title="五.tip"></a>五.tip</h1><p>有关map的知识点，还可以去看这个<br><a href="https://blog.csdn.net/weixin_52224421/article/details/124773006?spm=1001.2014.3001.5502">map知识点</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Go基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础（十三）切片</title>
      <link href="/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E5%88%87%E7%89%87/"/>
      <url>/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E5%88%87%E7%89%87/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="一-切片"><a href="#一-切片" class="headerlink" title="一.切片"></a>一.切片</h1><ul><li>切片的英文名称slice</li><li>切片:具有可变长度相同类型元素序列.</li><li>由于长度是可变,可以解决数组长度在数据个数不确定情况下浪费内存的问题.</li><li>切片和数组声明时语法最主要的区别就是长度</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slice []<span class="type">string</span>  <span class="comment">//切片</span></span><br><span class="line"><span class="keyword">var</span> array [<span class="number">3</span>]<span class="type">string</span> <span class="comment">//数组</span></span><br></pre></td></tr></table></figure><ul><li>切片只声明时为nil,没有开辟内存空间,不能直接操作切片,需要先初始化<ul><li>注意:切片只能和nil进行判断是否相等</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slice []<span class="type">string</span>  <span class="comment">//切片</span></span><br><span class="line">fmt.Println(slice==<span class="literal">nil</span>)<span class="comment">//输出:true</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p&quot;</span>,slice)<span class="comment">//输出:0x0</span></span><br></pre></td></tr></table></figure><h1 id="二-定义切片"><a href="#二-定义切片" class="headerlink" title="二.定义切片"></a>二.定义切片</h1><ul><li>通过直接指定初始值定初始化一个切片变量</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">names := []<span class="type">string</span>&#123;<span class="string">&quot;smallming&quot;</span>, <span class="string">&quot;佳明哥&quot;</span>&#125;</span><br><span class="line">fmt.Println(names)</span><br></pre></td></tr></table></figure><ul><li>定义完切片后就可以通过<code>切片对象[脚标]</code>取出或修改切片中元素内容.语法和数组相同</li></ul><h1 id="三-切片是引用类型"><a href="#三-切片是引用类型" class="headerlink" title="三.切片是引用类型"></a>三.切片是引用类型</h1><ul><li>引用类型在变量之间赋值时传递的是地址.引用类型变量就是这个类型的指针.切片就是引用类型</li><li>值类型在变量之间赋值时传递的是值的副本</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">names := []<span class="type">string</span>&#123;<span class="string">&quot;smallming&quot;</span>, <span class="string">&quot;佳明哥&quot;</span>&#125;</span><br><span class="line">names1 := names</span><br><span class="line">names1[<span class="number">0</span>] = <span class="string">&quot;张&quot;</span></span><br><span class="line">fmt.Println(names, names1)<span class="comment">//输出:[张 佳明哥] [张 佳明哥]</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p %p&quot;</span>,names,names1)<span class="comment">//地址相同</span></span><br></pre></td></tr></table></figure><h1 id="四-make函数"><a href="#四-make函数" class="headerlink" title="四.make函数"></a>四.make函数</h1><ul><li>Go语言中可以使用make函数创建slice 、 map、 channel、 interface</li><li>使用make函数定义无内容,但是不是nil的切片,意味着切片已经申请了内存空间<ul><li><code>make(类型,初始长度[,初始容量])</code></li><li>初始容量可以省略,默认和长度相等</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">slice := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>)     <span class="comment">//长度为0的切片,没有第三个参数表示容量和长度相等</span></span><br><span class="line">slice1 := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, <span class="number">2</span>) <span class="comment">//长度为0,容量为2</span></span><br><span class="line">fmt.Println(slice, slice1)</span><br></pre></td></tr></table></figure><ul><li>长度表示切片中元素的实际个数,容量表示切片占用空间大小,且切片容量成倍增加.当增加到1024后按照一定百分比增加.<ul><li>len(slice) 查看切片的长度</li><li>cap(slice) 查看切片的容量</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">slice := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>)     <span class="comment">//长度为0的切片,没有第三个参数表示容量和长度相等</span></span><br><span class="line">slice1 := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, <span class="number">3</span>) <span class="comment">//长度为0,容量为2</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice), <span class="built_in">cap</span>(slice))</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice1), <span class="built_in">cap</span>(slice1))</span><br></pre></td></tr></table></figure><h1 id="五-append-函数"><a href="#五-append-函数" class="headerlink" title="五.append()函数"></a>五.append()函数</h1><ul><li>append()在Go语言标准库中源码如下</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The append built-in function appends elements to the end of a slice. If</span></span><br><span class="line"><span class="comment">// it has sufficient capacity, the destination is resliced to accommodate the</span></span><br><span class="line"><span class="comment">// new elements. If it does not, a new underlying array will be allocated.</span></span><br><span class="line"><span class="comment">// Append returns the updated slice. It is therefore necessary to store the</span></span><br><span class="line"><span class="comment">// result of append, often in the variable holding the slice itself:</span></span><br><span class="line"><span class="comment">//slice = append(slice, elem1, elem2)</span></span><br><span class="line"><span class="comment">//slice = append(slice, anotherSlice...)</span></span><br><span class="line"><span class="comment">// As a special case, it is legal to append a string to a byte slice, like this:</span></span><br><span class="line"><span class="comment">//slice = append([]byte(&quot;hello &quot;), &quot;world&quot;...)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(slice []Type, elems ...Type)</span></span> []Type</span><br></pre></td></tr></table></figure><ul><li>可以向切片中添加一个或多个值,添加后必须使用切片接收append()函数返回值</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s))<span class="comment">//输出:0 0</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="string">&quot;老张&quot;</span>, <span class="string">&quot;佳明哥&quot;</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s))<span class="comment">//输出:2 2</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="string">&quot;smallming&quot;</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s))<span class="comment">//输出:3 4</span></span><br></pre></td></tr></table></figure><ul><li>如果添加一次添加多个值,且添加后的长度大于扩容一次的大小,容量和长度相等.等到下次添加内容时如果不超出扩容大小,在现在的基础上进行翻倍</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">//输出:0 0</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="string">&quot;老张&quot;</span>, <span class="string">&quot;佳明哥&quot;</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">//输出:2 2</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="string">&quot;smallming&quot;</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">//输出:3 4</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">//输出:9 9</span></span><br><span class="line">s = <span class="built_in">append</span>(s,<span class="string">&quot;10&quot;</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">//输出:10 18</span></span><br></pre></td></tr></table></figure><ul><li>也可以把一个切片的内容直接添加到另一个切片中.需要注意语法中有三个点</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>)</span><br><span class="line">s1 := []<span class="type">string</span>&#123;<span class="string">&quot;smallming&quot;</span>, <span class="string">&quot;佳明哥&quot;</span>&#125;</span><br><span class="line">s = <span class="built_in">append</span>(s, s1...) <span class="comment">//注意此处,必须有三个点</span></span><br><span class="line">fmt.Println(s)</span><br></pre></td></tr></table></figure><h1 id="六-通过数组产生切片"><a href="#六-通过数组产生切片" class="headerlink" title="六.通过数组产生切片"></a>六.通过数组产生切片</h1><ul><li>定义数组后,取出数组中一个片段,这个片段就是切片类型</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">names := [<span class="number">3</span>]<span class="type">string</span>&#123;<span class="string">&quot;老张&quot;</span>, <span class="string">&quot;佳明哥&quot;</span>, <span class="string">&quot;smallming&quot;</span>&#125;</span><br><span class="line">s := names[<span class="number">0</span>:<span class="number">2</span>]     <span class="comment">//包前不包后</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T&quot;</span>, s) <span class="comment">//输出:[]string</span></span><br><span class="line">fmt.Println(s)      <span class="comment">//输出:[老张 佳明哥]</span></span><br></pre></td></tr></table></figure><ul><li>切片是指针,指向数组元素地址,修改切片的内容,数组的内容会跟随变化</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names := [<span class="number">3</span>]<span class="type">string</span>&#123;<span class="string">&quot;老张&quot;</span>, <span class="string">&quot;佳明哥&quot;</span>, <span class="string">&quot;smallming&quot;</span>&#125;</span><br><span class="line">s := names[<span class="number">0</span>:<span class="number">2</span>] <span class="comment">//包前不包后</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p %p&quot;</span>,s,&amp;names[<span class="number">0</span>])<span class="comment">//输出的地址是相同的</span></span><br><span class="line">s[<span class="number">0</span>] = <span class="string">&quot;Go语言&quot;</span></span><br><span class="line">fmt.Println(s)     <span class="comment">//输出:[Go语言 佳明哥]</span></span><br><span class="line">fmt.Println(names) <span class="comment">//输出:[Go语言 佳明哥 smallming]</span></span><br></pre></td></tr></table></figure><ul><li>当切片内容在增加时<ul><li>如果增加后切片的长度没有超出数组,修改切片也是在修改数组</li><li>如果增加后切片的长度超出数组,会重新开辟一块空间放切片的内容</li><li>通过下面代码也正面了切片中内容存在一块连续空间(和数组一样)</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">names := [<span class="number">3</span>]<span class="type">string</span>&#123;<span class="string">&quot;老张&quot;</span>, <span class="string">&quot;佳明哥&quot;</span>, <span class="string">&quot;smallming&quot;</span>&#125;</span><br><span class="line">s := names[<span class="number">0</span>:<span class="number">2</span>] <span class="comment">//包前不包后</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p %p\n&quot;</span>,s,&amp;names[<span class="number">0</span>])</span><br><span class="line">s[<span class="number">0</span>] = <span class="string">&quot;Go语言&quot;</span></span><br><span class="line">s=<span class="built_in">append</span>(s,<span class="string">&quot;区块链&quot;</span>)</span><br><span class="line">fmt.Println(s)     <span class="comment">//输出:[Go语言 佳明哥 区块链]</span></span><br><span class="line">fmt.Println(names) <span class="comment">//输出:[Go语言 佳明哥 区块链]</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p %p\n&quot;</span>,s,&amp;names[<span class="number">0</span>])<span class="comment">//地址相同</span></span><br><span class="line"></span><br><span class="line">s=<span class="built_in">append</span>(s,<span class="string">&quot;超出了数组长度&quot;</span>)</span><br><span class="line">fmt.Println(s)     <span class="comment">//输出:[Go语言 佳明哥 区块链 超出了数组长度]</span></span><br><span class="line">fmt.Println(names) <span class="comment">//输出:[Go语言 佳明哥 区块链]</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p %p\n&quot;</span>,s,&amp;names[<span class="number">0</span>])<span class="comment">//切片地址改变</span></span><br></pre></td></tr></table></figure><h1 id="七-删除实现"><a href="#七-删除实现" class="headerlink" title="七.删除实现"></a>七.删除实现</h1><ul><li>Go语言标准库中没有提供删除的函数</li><li>切片也可以取其中的一段形成子切片,利用这个特性可以实现删除效果</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num := []<span class="type">int</span> &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="comment">//要删除脚标为n的元素</span></span><br><span class="line">n:= <span class="number">2</span></span><br><span class="line">num1 :=num[<span class="number">0</span>:n]</span><br><span class="line">num1= <span class="built_in">append</span>(num1,num[n+<span class="number">1</span>:]...)</span><br><span class="line">fmt.Println(num1)</span><br></pre></td></tr></table></figure><h1 id="八-练习"><a href="#八-练习" class="headerlink" title="八.练习"></a>八.练习</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := [...]<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line">s := arr[:]</span><br><span class="line">fmt.Println(s)</span><br><span class="line">sa := s[<span class="number">2</span>:<span class="number">6</span>]</span><br><span class="line">fmt.Printf(<span class="string">&quot;s1 = %v, len = %d, cap = %d&quot;</span>, sa, <span class="built_in">len</span>(sa), <span class="built_in">cap</span>(sa))</span><br><span class="line">fmt.Println()</span><br><span class="line">sb := sa[<span class="number">3</span>:<span class="number">5</span>]</span><br><span class="line">fmt.Printf(<span class="string">&quot;s2 = %v, len = %d, cap = %d&quot;</span>, sb, <span class="built_in">len</span>(sb), <span class="built_in">cap</span>(sb))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/99b071dcbbe2435894ab8ce6aba13d7b.png" alt="在这里插入图片描述"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := [...]<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line">s1 := arr[<span class="number">2</span>:<span class="number">6</span>]       <span class="comment">//3,4,5,10</span></span><br><span class="line">s2 := s1[<span class="number">3</span>:<span class="number">5</span>]        <span class="comment">//4,5</span></span><br><span class="line">s3 := <span class="built_in">append</span>(s2, <span class="number">10</span>) <span class="comment">//4,5,10</span></span><br><span class="line">s4 := <span class="built_in">append</span>(s3, <span class="number">11</span>) <span class="comment">//4,5,10,11</span></span><br><span class="line">s5 := <span class="built_in">append</span>(s4, <span class="number">12</span>) <span class="comment">//4,5,10,11,12</span></span><br><span class="line">fmt.Println(s1, s2, s3, s4, s5)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/a16fef28f5404da38de8d38d16e6300a.png" alt="在这里插入图片描述"></p><h1 id="九-tips"><a href="#九-tips" class="headerlink" title="九.tips"></a>九.tips</h1><p>有关切片的疑点，可以去看这两篇文章<br><a href="https://blog.csdn.net/weixin_52224421/article/details/124641435">疑点一</a><br><a href="https://blog.csdn.net/weixin_52224421/article/details/124764905">疑点二</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Go基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础（十二）循环</title>
      <link href="/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E5%BE%AA%E7%8E%AF/"/>
      <url>/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="一-for循环"><a href="#一-for循环" class="headerlink" title="一.for循环"></a>一.for循环</h1><ul><li>循环:让程序多次执行相同的代码块</li><li>for循环是Go语言中唯一一个循环结构</li><li>for循环经典语法<ul><li>先执行表达式1</li><li>执行表达式判断是否成立,如果成立执行循环体</li><li>循环体执行完成后,执行表达式3</li><li>再次执行表达式2,判断是否成立.</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for 表达式1;表达式2;表达式3&#123;</span><br><span class="line">  //循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>for循环用的最多的地方就是遍历数组或切片等</li></ul><h1 id="二-代码示例"><a href="#二-代码示例" class="headerlink" title="二.代码示例"></a>二.代码示例</h1><ul><li>经典for循环结构中 , for关键字后面有三个表达式,且每个表达式都可以省略</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">j := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ; j &lt; <span class="number">5</span>; &#123;</span><br><span class="line">fmt.Println(j)</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>for关键字后面也可以只有一个表达式,表示如果条件成立执行循环体代码</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">j := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j &lt; <span class="number">5</span> &#123;</span><br><span class="line">fmt.Println(j)</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三-使用for循环遍历数组"><a href="#三-使用for循环遍历数组" class="headerlink" title="三.使用for循环遍历数组"></a>三.使用for循环遍历数组</h1><ul><li>可以通过数组的长度判断循环结束条件遍历整个数组</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr := [<span class="number">3</span>]<span class="type">string</span>&#123;<span class="string">&quot;smallming&quot;</span>, <span class="string">&quot;张&quot;</span>, <span class="string">&quot;佳明哥&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line">fmt.Println(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>for循环遍历数组等时常与range结合使用<ul><li>range函数返回两个值,第一个是脚标,第二个是内容</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr := [<span class="number">3</span>]<span class="type">string</span>&#123;<span class="string">&quot;smallming&quot;</span>, <span class="string">&quot;张&quot;</span>, <span class="string">&quot;佳明哥&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, n := <span class="keyword">range</span> arr &#123;</span><br><span class="line"><span class="comment">//其中n=arr[i]</span></span><br><span class="line">fmt.Println(i, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-双重for循环"><a href="#四-双重for循环" class="headerlink" title="四. 双重for循环"></a>四. 双重for循环</h1><ul><li>可以在循环中执行循环,称为双重for循环</li><li>代码示例</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">2</span>; j++ &#123;</span><br><span class="line">fmt.Println(i, j)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面代码中注意:<ul><li>只有当子循环完全执行结束才能再次执行外侧循环.因为循环体执行完才能执行表达式3</li></ul></li></ul><h1 id="五-冒泡排序"><a href="#五-冒泡排序" class="headerlink" title="五.冒泡排序"></a>五.冒泡排序</h1><ul><li>排序就是把一组数据按照特定的顺序重新排列.可以是升序,降序等</li><li>冒泡排序利用双重for循环把最大(小)的值移动到一侧,每次可以判断出一个数据,如果有n个数组,执行n-1次循环就可以完成排序</li><li>排序代码(升序还是降序主要是看if判断是大于还是小于)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arr := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr)<span class="number">-1</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(arr)-i<span class="number">-1</span>; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>] &#123;</span><br><span class="line">arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(arr)</span><br></pre></td></tr></table></figure><h1 id="六-continue"><a href="#六-continue" class="headerlink" title="六.continue"></a>六.continue</h1><ul><li>continue关键字控制结束本次 **循环体 **结束,执行表达式三.</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">2</span> || i == <span class="number">3</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在双重for循环中continue默认影响最内侧循环,与最外层循环无关</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> k := <span class="number">0</span>; k &lt; <span class="number">2</span>; k++ &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(k, i, <span class="string">&quot;结束&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Go语言执行标签写法,可以通过定义标签让continue控制影响哪个for循环</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">myfor:<span class="keyword">for</span> k := <span class="number">0</span>; k &lt; <span class="number">2</span>; k++ &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">continue</span> myfor</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(k, i, <span class="string">&quot;结束&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七-break"><a href="#七-break" class="headerlink" title="七. break"></a>七. break</h1><ul><li>break可以中断for循环,无论for循环还有几次执行,立即停止</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在双重for循环中,break默认也影响到最近的for循环</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">2</span>; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> j == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(i, j)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>break也可以通过定义标签,控制break对哪个for循环生效</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">myfor:<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">2</span>; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> j == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">break</span> myfor</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(i, j)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="八-小知识"><a href="#八-小知识" class="headerlink" title="八.小知识"></a>八.小知识</h1><h2 id="一-goto"><a href="#一-goto" class="headerlink" title="一.goto"></a>一.goto</h2><ul><li>goto是Go语言中的一个关键字</li><li>goto让编译器执行时跳转到特定位置<ul><li>Loop是标记名(Label),名称任意,习惯上名称为Loop</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;执行程序&quot;</span>)</span><br><span class="line">i := <span class="number">6</span></span><br><span class="line"><span class="keyword">if</span> i == <span class="number">6</span> &#123;</span><br><span class="line"><span class="keyword">goto</span> Loop</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;if下面输出&quot;</span>)</span><br><span class="line">Loop:</span><br><span class="line">fmt.Println(<span class="string">&quot;loop&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>可以有多个,但是标签(Labal)定义了就必须使用</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;执行程序&quot;</span>)</span><br><span class="line">i := <span class="number">6</span></span><br><span class="line"><span class="keyword">if</span> i == <span class="number">6</span> &#123;</span><br><span class="line"><span class="keyword">goto</span> Loop</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;if下面输出&quot;</span>)</span><br><span class="line">Loop:</span><br><span class="line">fmt.Println(<span class="string">&quot;loop&quot;</span>)</span><br><span class="line">Loop1: <span class="comment">//报错:label Loop1 defined and not used</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Loop1&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>goto也可以用于跳出循环,执行指定标签位置代码</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">goto</span> abc</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;for循环执行结束&quot;</span>)</span><br><span class="line">abc:</span><br><span class="line">fmt.Println(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;程序结束&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="九-练习"><a href="#九-练习" class="headerlink" title="九.练习"></a>九.练习</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertToBin</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">res := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">res = <span class="string">&quot;0&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> ; n &gt; <span class="number">0</span>; n /= <span class="number">2</span> &#123;</span><br><span class="line">lsb := n % <span class="number">2</span></span><br><span class="line">res = strconv.Itoa(lsb) + res</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFile</span><span class="params">(filename <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">file, err := os.Open(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">scanner := bufio.NewScanner(file)</span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">fmt.Println(scanner.Text())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">forever</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(</span><br><span class="line">convertToBin(<span class="number">5</span>),</span><br><span class="line">convertToBin(<span class="number">13</span>),</span><br><span class="line">convertToBin(<span class="number">0</span>),</span><br><span class="line">)</span><br><span class="line">readFile(<span class="string">&quot;abc.txt&quot;</span>)</span><br><span class="line">forever()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Go基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础（十一）数组</title>
      <link href="/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E6%95%B0%E7%BB%84/"/>
      <url>/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="一-数组介绍"><a href="#一-数组介绍" class="headerlink" title="一.数组介绍"></a>一.数组介绍</h1><ul><li>数组:具有固定长度相同类型元素序列</li><li>声明数组的语法</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var 对象名 [长度]元素类型</span></span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">fmt.Println(arr) <span class="comment">//输出:[0 0 0 0 0]</span></span><br></pre></td></tr></table></figure><ul><li>数组就是内存中一段固定长度的连续空间.</li><li>声明数组后数组就会在内存中开辟一块连续空间,每个值称为数组的元素,且元素值为类型对应的默认值.例如int类型默认值为0,string类型默认值为空字符串</li><li>数组中每个元素按照顺序都有自己整数类型的脚标,脚标从第一个元素为0向后依次加1<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-TqaLWJk4-1661413255607)(images&#x2F;05_03_array.png)]</li><li>数组中实际开发中主要作用是充当临时容器,因为声明一个数组变量比声明多个相同类型变量在操作时更加方便</li></ul><h1 id="二-数组的创建和赋值"><a href="#二-数组的创建和赋值" class="headerlink" title="二.数组的创建和赋值"></a>二.数组的创建和赋值</h1><ul><li>可以在声明数组时可以同时给数组赋值,赋值时要求长度必须大于等于初始值个数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一:完整写法</span></span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">3</span>]<span class="type">int</span> = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">//方式二:短变量方式</span></span><br><span class="line">arr2 := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">//方式三:长度大于初始值个数.长度为4,只给前三个元素赋值,其余元素为默认值</span></span><br><span class="line">arr3 := [<span class="number">4</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">//方式四:赋值时不写长度,数组长度根据元素个数确定</span></span><br><span class="line">arr4 := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>可以通过:**数组名[脚标]**对数组中元素进行操作</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arr := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(arr)</span><br><span class="line"><span class="comment">//通过脚标对数组中元素进行重新赋值</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">6</span></span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">7</span></span><br><span class="line">fmt.Println(arr[<span class="number">0</span>], arr[<span class="number">1</span>], arr[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><ul><li>通过len(数组变量)获取数组长度,数组脚标最大值为长度减一,如果超出这个范围将会报错</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(arr))<span class="comment">//输出:3</span></span><br><span class="line">arr[<span class="number">3</span>]=<span class="number">5</span><span class="comment">//错误信息:invalid array index 3 (out of bounds for 3-element array)</span></span><br></pre></td></tr></table></figure><h1 id="三-数组是值类型"><a href="#三-数组是值类型" class="headerlink" title="三.数组是值类型"></a>三.数组是值类型</h1><ul><li>在Go语言中数组是值类型,和之前学习的int或float64等类型相同,把一个数组变量赋值给另一个数组变量时为复制副本,重新开辟一块空间</li><li>使用&#x3D;&#x3D;比较数组中值是否相等</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">arr2:=arr</span><br><span class="line">fmt.Println(arr,arr2)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%p %p&quot;</span>,&amp;arr,&amp;arr2)<span class="comment">//地址不同</span></span><br><span class="line">fmt.Println(arr==arr2)</span><br></pre></td></tr></table></figure><h1 id="四-二维数组"><a href="#四-二维数组" class="headerlink" title="四.二维数组"></a>四.二维数组</h1><ul><li>二维数组表示一个数组变量中每个元素又是一个数组变量</li><li>声明二维数组的语法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr [n][m]int</span><br></pre></td></tr></table></figure><ul><li>使用 arr[n]时返回一个 arr[m]类型的数组</li><li>图示<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-3Sofdj19-1661413354013)(images&#x2F;2_5_4_erweishuzu.png)]</li></ul><h1 id="五-二维数组的使用"><a href="#五-二维数组的使用" class="headerlink" title="五.二维数组的使用"></a>五.二维数组的使用</h1><ul><li>声明并创建二维数组</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写在同一行,最后一个元素后面不需要有逗号</span></span><br><span class="line"><span class="comment">//arr6:=[3][3]int&#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;,&#123;7,8,9&#125;&#125;</span></span><br><span class="line">arr := [<span class="number">3</span>][<span class="number">3</span>]<span class="type">int</span>&#123;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">&#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;, <span class="comment">//每个元素分行写,最后一个必须有逗号</span></span><br><span class="line">&#125;</span><br><span class="line">arr0 := arr[<span class="number">0</span>]</span><br><span class="line">fmt.Println(arr0[<span class="number">0</span>], arr0[<span class="number">1</span>], arr[<span class="number">2</span>])</span><br><span class="line"><span class="comment">//上面等效于下面的写法.习惯上多下下面的方式</span></span><br><span class="line">fmt.Println(arr[<span class="number">0</span>][<span class="number">0</span>], arr[<span class="number">0</span>][<span class="number">1</span>], arr[<span class="number">0</span>][<span class="number">2</span>])</span><br></pre></td></tr></table></figure><h1 id="六-多维数组"><a href="#六-多维数组" class="headerlink" title="六.多维数组"></a>六.多维数组</h1><ul><li>理论上支持无限多维数组(只要内存够用)</li><li>三维数组可以理解成,一维数组中每个元素都是二维数组.四维数组理解成,一个一维数组中每个元素都是三维数组</li><li>无论是几维数组,都符号元素类型是相同的</li><li>实际开发中多维数组使用并不多,在一定程度上,程序员使用多维数组很容易出错</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">arr := [<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>]<span class="type">int</span>&#123;</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">&#123;<span class="number">7</span>, <span class="number">8</span>&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(arr)</span><br><span class="line"><span class="comment">//几维数组在操作元素时,数组变量后面就有几个[]</span></span><br><span class="line">fmt.Println(arr[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h1 id="七-练习"><a href="#七-练习" class="headerlink" title="七.练习"></a>七.练习</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printArray</span><span class="params">(arr *[5]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> arr &#123;</span><br><span class="line">fmt.Println(i, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr1 [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">arr2 := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;</span><br><span class="line">arr3 := [...]<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>&#125;</span><br><span class="line">fmt.Println(arr1, arr2, arr3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> grid [<span class="number">4</span>][<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">fmt.Println(grid)</span><br><span class="line"></span><br><span class="line">printArray(&amp;arr3)</span><br><span class="line">fmt.Println(arr1, arr3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：<br><img src="/images/5faed446dc834fb0b196689506ec66a7.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Go基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础（十）指针</title>
      <link href="/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%EF%BC%89%E6%8C%87%E9%92%88/"/>
      <url>/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%EF%BC%89%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="一-变量地址"><a href="#一-变量地址" class="headerlink" title="一.变量地址"></a>一.变量地址</h1><ul><li>变量本质就是内存中一块数据的标记.把值存储到变量中实质是把值存储到内存中</li><li>每次对变量重新赋值就是在修改变量地址中的内容</li><li>在Go语言中可以通过 <code>&amp;+变量名</code> 获取到变量地址值</li><li>重新创建一个非引用型变量(即使是把已有变量直接赋值给新变量)也会新开辟内存地址.</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">3</span></span><br><span class="line">fmt.Println(&amp;a) <span class="comment">//输出:地址</span></span><br><span class="line">a = <span class="number">4</span></span><br><span class="line">fmt.Println(&amp;a) <span class="comment">//输出的地址不变</span></span><br><span class="line"></span><br><span class="line">b := a</span><br><span class="line">b = <span class="number">5</span></span><br><span class="line">fmt.Println(&amp;b, &amp;a) <span class="comment">//两个值不相同</span></span><br><span class="line">fmt.Println(b, a)   <span class="comment">//输出:5 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二-指针变量"><a href="#二-指针变量" class="headerlink" title="二.指针变量"></a>二.指针变量</h1><ul><li>指针变量指向一个值的内存地址</li><li>使用&amp;+变量 返回值就是一个指针类型</li><li>使用<code>var 变量名 *类型</code> 声明指针类型变量</li><li>声明指针不会开辟内存地址,只是准备要指向内存某个空间,而声明变量会开辟内存地址,准备存放内容.所以指针类型变量都是把一个变量的地址赋值给指针变量</li><li>使用<code>*+指针</code>能够获取内存地址中的值.所以<code>*+指针</code>就和直接使用变量是相同的</li><li>应用指针可以实现多个地方操作同一个内存地址的值(在方法参数应用指针较多)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//创建变量</span></span><br><span class="line">a := <span class="number">123</span></span><br><span class="line"><span class="keyword">var</span> point *<span class="type">int</span></span><br><span class="line">point = &amp;a <span class="comment">//此时point和&amp;a是相等的</span></span><br><span class="line">fmt.Println(point)</span><br><span class="line">*point = <span class="number">3</span>             <span class="comment">//等价于a=3</span></span><br><span class="line">fmt.Println(*point, a) <span class="comment">//*point和a是相当的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三-空指针"><a href="#三-空指针" class="headerlink" title="三.空指针"></a>三.空指针</h1><ul><li>指针目的就是指向内存中一块地址</li><li>声明指针后指针不会指向任何内存地址,所以此时指针是空.在Go语言中空用nil表示</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a *<span class="type">int</span></span><br><span class="line">fmt.Println(a)        <span class="comment">//输出:&lt;nil&gt;</span></span><br><span class="line">fmt.Println(a == <span class="literal">nil</span>) <span class="comment">//输出true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-练习"><a href="#四-练习" class="headerlink" title="四.练习"></a>四.练习</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//go只有值传递</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(a, b <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> b, a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">fmt.Println(a, b)</span><br><span class="line">a, b = swap(a, b)</span><br><span class="line">fmt.Println(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：<br><img src="/images/582f9293cccd472fafd5a2d27cca3791.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Go基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础（九）函数</title>
      <link href="/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B9%9D%EF%BC%89%E5%87%BD%E6%95%B0/"/>
      <url>/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B9%9D%EF%BC%89%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="一-函数"><a href="#一-函数" class="headerlink" title="一. 函数"></a>一. 函数</h1><ul><li>函数:一段代码块</li><li>所有的流程控制代码和业务代码都只能写在函数内部</li><li>为什么使用函数:<ul><li>把一个功能提出作为一个函数便于后期维护,结构清晰</li></ul></li><li>函数声明的语法<ul><li>函数声明后不会执行,必须调用后才会执行</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func 函数名(参数列表) 返回值&#123;</span><br><span class="line">  //函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数调用的语法</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">返回值:=函数名(参数)</span><br></pre></td></tr></table></figure><h1 id="二-无参数无返回值函数"><a href="#二-无参数无返回值函数" class="headerlink" title="二. 无参数无返回值函数"></a>二. 无参数无返回值函数</h1><ul><li>函数可以有参数也可以没有参数,可以有返回值也可以没有返回值</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">demo1()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;执行demo1函数&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面代码等同于</span></span><br><span class="line"><span class="comment">//func main()&#123;</span></span><br><span class="line"><span class="comment">//fmt.Println(&quot;执行demo1函数&quot;)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="三-有参数函数"><a href="#三-有参数函数" class="headerlink" title="三.有参数函数"></a>三.有参数函数</h1><ul><li>函数的参数可以有多个,且每个参数类型都可以不同</li><li>参数表示调用函数方想要给函数内部传递的值,给函数使用的.</li><li>声明函数时的参数叫做形参数,调用函数时参数叫做实参</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">i:=<span class="number">5</span></span><br><span class="line">s:=<span class="string">&quot;smallming&quot;</span></span><br><span class="line">show(s,i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(name <span class="type">string</span>,age <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;姓名:&quot;</span>,name,<span class="string">&quot;年龄&quot;</span>,age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-有返回值函数"><a href="#四-有返回值函数" class="headerlink" title="四.有返回值函数"></a>四.有返回值函数</h1><ul><li>函数的返回值是给调用方返回的数据,给调用方使用的.</li><li>具有返回值的函数,必须要有return</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">fmt.Println(add(a,b))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(c, d <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c + d</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>也可以在返回值类型前面添加变量,return关键字后不写内容,表示变量是什么返回值什么</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">a, b := 1, 2</span><br><span class="line">fmt.Println(add2(a,b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func add2(c, d int) (sum int) &#123;</span><br><span class="line">sum = c + d</span><br><span class="line">return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五-多返回值函数"><a href="#五-多返回值函数" class="headerlink" title="五. 多返回值函数"></a>五. 多返回值函数</h1><ul><li>在Go语言中每个函数声明时都可以定义成多返回值函数</li><li>Go语言中所有的错误都是通过返回值返回的</li><li>声明多返回值函数的语法</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数名<span class="params">(参数列表)</span></span> (返回值,返回值)&#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用函数的语法</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量,变量:=函数名(参数)</span><br></pre></td></tr></table></figure><ul><li>调用函数时如果不想接收可以使用下划线占位</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量,_:=函数名(参数)</span><br></pre></td></tr></table></figure><ul><li>理论上函数返回值个数可以无限多个,但是一般不去定义特别多个返回值(用结构体代替多返回值)</li></ul><h1 id="六-代码演示"><a href="#六-代码演示" class="headerlink" title="六.代码演示"></a>六.代码演示</h1><ul><li>函数的返回值可以不接收,表示执行函数</li><li>函数的返回值如果接收,用于接收返回值的变量个数与返回值个数相同</li><li>不想接收的使用占位符(_)占位</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//不接收函数返回值</span></span><br><span class="line">demo()</span><br><span class="line"></span><br><span class="line"><span class="comment">//每个返回值都接收</span></span><br><span class="line">a, b := demo()</span><br><span class="line">fmt.Println(a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment">//不希望接收的返回值使用下划线占位</span></span><br><span class="line">c, _ := demo()</span><br><span class="line">fmt.Println(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">()</span></span> (<span class="type">string</span>, <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;smallming&quot;</span>, <span class="number">17</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多返回值函数也可以给返回值定义变量,return后面就不需要编写内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func demo() (name string, age int) &#123;</span><br><span class="line">name = &quot;smallming&quot;</span><br><span class="line">age = 17</span><br><span class="line">return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七-可变参数函数"><a href="#七-可变参数函数" class="headerlink" title="七. 可变参数函数"></a>七. 可变参数函数</h1><ul><li>Go语言支持可变参数函数</li><li>可变参数指调用参数时,参数的个数可以是任意个</li><li>可变参数必须在参数列表最后的位置,在参数名和类型之间添加三个点表示可变参数函数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数<span class="params">(参数,参数,名称 ... 类型 )</span></span>&#123;</span><br><span class="line"><span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出语句就是可变参数函数,源码如下</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Println</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Fprintln(os.Stdout, a...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明函数时,在函数体把可变参数当作切片使用即可</li></ul><h1 id="八-代码示例"><a href="#八-代码示例" class="headerlink" title="八.代码示例"></a>八.代码示例</h1><ul><li>声明可变参数声明与调用</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">demo(<span class="string">&quot;看书&quot;</span>, <span class="string">&quot;写代码&quot;</span>, <span class="string">&quot;看佳明哥视频&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(hover ... <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> a, b := <span class="keyword">range</span> hover &#123;</span><br><span class="line">fmt.Println(a, b)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可变参数必须存在其他参数后面,一个函数不能有多个可变参数.<ul><li>因为前面普通参数个数是确定的,编译器知道,哪个实参给哪个形参</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">demo(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;看书&quot;</span>, <span class="string">&quot;写代码&quot;</span>, <span class="string">&quot;看佳明哥视频&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(name <span class="type">string</span>, hover ... <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(name, <span class="string">&quot;的爱好是&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> a, b := <span class="keyword">range</span> hover &#123;</span><br><span class="line">fmt.Println(a, b)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="九-匿名函数"><a href="#九-匿名函数" class="headerlink" title="九.匿名函数"></a>九.匿名函数</h1><ul><li>匿名函数就是没有名称的函数</li><li>正常函数可以通过名称多次调用,而匿名函数由于没有函数名,所以大部分情况都是在当前位置声明并立即调用(函数变量除外)</li><li>匿名函数声明完需要调用,在函数结束大括号后面紧跟小括号</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">()</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;()<span class="comment">//括号表示调用</span></span><br></pre></td></tr></table></figure><ul><li>匿名函数都是声明在其他函数内部</li></ul><h1 id="十-匿名函数演示"><a href="#十-匿名函数演示" class="headerlink" title="十. 匿名函数演示"></a>十. 匿名函数演示</h1><ul><li>无参数匿名函数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;这是匿名函数&quot;</span>)</span><br><span class="line">   &#125;()<span class="comment">//括号表示调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有参数匿名函数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">func</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">      fmt.Println(s, <span class="string">&quot;这是匿名函数&quot;</span>)</span><br><span class="line">   &#125;(<span class="string">&quot;传递参数&quot;</span>) <span class="comment">//调用时传递参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有参数有返回值匿名函数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := <span class="function"><span class="keyword">func</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">fmt.Println(s, <span class="string">&quot;这是匿名函数&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">110</span></span><br><span class="line">&#125;(<span class="string">&quot;传递参数&quot;</span>) <span class="comment">//调用时传递参数</span></span><br><span class="line">fmt.Println(r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十一-函数变量"><a href="#十一-函数变量" class="headerlink" title="十一.函数变量"></a>十一.函数变量</h1><ul><li>在Go语言中函数也是一种类型,函数有多少种形式,函数变量就有多少种写法</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="function"><span class="keyword">func</span><span class="params">()</span></span>           <span class="comment">//无参数无返回值</span></span><br><span class="line"><span class="keyword">var</span> b <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span>        <span class="comment">//有一个int类型参数</span></span><br><span class="line"><span class="keyword">var</span> c <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">string</span> <span class="comment">//有一个int类型参数和string类型返回值</span></span><br><span class="line">fmt.Println(a, b, c)   <span class="comment">//输出:&lt;nil&gt; &lt;nil&gt; &lt;nil&gt;</span></span><br></pre></td></tr></table></figure><ul><li>定义完函数变量后,可以使用匿名函数进行赋值.也可以使用已经定义好的函数进行赋值</li><li>函数变量定义以后与普通函数调用语法相同,变量名就是普通函数声明的函数名</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">a = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;执行函数&quot;</span>)</span><br><span class="line">&#125;   <span class="comment">//注意此处没有括号,有括号表示调用函数,变量a就表示接收函数返回值</span></span><br><span class="line">a() <span class="comment">//调用函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">也可以使用短变量方式定义函数变量</span></span><br><span class="line"><span class="comment">等效于</span></span><br><span class="line"><span class="comment">func b(s string)&#123;</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">b := <span class="function"><span class="keyword">func</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;执行第二个函数&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">b(<span class="string">&quot;参数&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用定义好的函数</span></span><br><span class="line">d := c</span><br><span class="line">d()</span><br><span class="line"><span class="comment">//函数名称c也是一个变量</span></span><br><span class="line">c()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">c</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;c函数&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数类型变量是除了slice、map、channel、interface外第五种引用类型</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">a = b</span><br><span class="line">a()</span><br><span class="line"><span class="keyword">var</span> c <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">c = a</span><br><span class="line">c()</span><br><span class="line">fmt.Printf(<span class="string">&quot;%p %p&quot;</span>, a, c)<span class="comment">//输出地址相同</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;b&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十二-函数作为参数或返回值"><a href="#十二-函数作为参数或返回值" class="headerlink" title="十二. 函数作为参数或返回值"></a>十二. 函数作为参数或返回值</h1><ul><li>变量可以作为函数的参数或返回值类型.而函数既然可以当做变量看待,函数变量也可以当做函数的参数或返回值</li><li>函数作为参数时,类型写成对应的类型即可</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a(<span class="function"><span class="keyword">func</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">(b <span class="keyword">func</span>(s <span class="type">string</span>)</span></span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;a执行&quot;</span>)</span><br><span class="line">b(<span class="string">&quot;传递给s的内容&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数作为返回值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">//此时result指向返回值函数.</span><br><span class="line">result := a()</span><br><span class="line">//调用函数,才能获取结果</span><br><span class="line">fmt.Println(result())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func a() func() int &#123;</span><br><span class="line">return func() int &#123;</span><br><span class="line">return 110</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十三-练习"><a href="#十三-练习" class="headerlink" title="十三.练习"></a>十三.练习</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">eval</span><span class="params">(a, b <span class="type">int</span>, op <span class="type">string</span>)</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> res <span class="type">int</span></span><br><span class="line"><span class="keyword">switch</span> op &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">res = a + b</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">res = a - b</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">q, _ := div(a, b)</span><br><span class="line">res = q</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">res = a * b</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, fmt.Errorf(<span class="string">&quot;unsupported opoeration: %s&quot;</span>, op)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">div</span><span class="params">(a, b <span class="type">int</span>)</span></span> (q, r <span class="type">int</span>) &#123;</span><br><span class="line">q = a / b</span><br><span class="line">r = a % b</span><br><span class="line"><span class="keyword">return</span> q, r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数作为参数，接收两个int类型的变量，返回一个int类型</span></span><br><span class="line"><span class="comment">//如何调用：op(a,b)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">apply</span><span class="params">(op <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>, a, b <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">p := reflect.ValueOf(op).Pointer()</span><br><span class="line">opName := runtime.FuncForPC(p).Name()</span><br><span class="line">fmt.Printf(<span class="string">&quot;Calling function %s with args &quot;</span>+<span class="string">&quot;(%d, %d): &quot;</span>, opName, a, b)</span><br><span class="line"><span class="keyword">return</span> op(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(number ...<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">s := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> number &#123;</span><br><span class="line">s += number[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> res, err := eval(<span class="number">3</span>, <span class="number">4</span>, <span class="string">&quot;*&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;ERROR:&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(res)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(div(<span class="number">13</span>, <span class="number">3</span>))</span><br><span class="line">q, r := div(<span class="number">13</span>, <span class="number">3</span>)</span><br><span class="line">fmt.Println(q, r)</span><br><span class="line"></span><br><span class="line"><span class="comment">//采用匿名函数的办法</span></span><br><span class="line">fmt.Println(apply(<span class="function"><span class="keyword">func</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">int</span>(math.Pow(<span class="type">float64</span>(a), <span class="type">float64</span>(b)))</span><br><span class="line">&#125;, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">fmt.Println(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：<br><img src="/images/fb95fa521752458f8c70cc0436e5a79b.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Go基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础（八）判断</title>
      <link href="/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AB%EF%BC%89%E5%88%A4%E6%96%AD/"/>
      <url>/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AB%EF%BC%89%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="一-条件判断if"><a href="#一-条件判断if" class="headerlink" title="一. 条件判断if"></a>一. 条件判断if</h1><ul><li><p>在程序开发中经常需要判断.根据情况不同,程序执行的分支也不同.这个时候就可以使用if</p></li><li><p>if在程序中代表<strong>如果</strong>，如果条件成立就执行,否则就不执行</p></li><li><p>if的语法结构,在编译器中表达式两侧可以写小括号,但是通常省略</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//单独使用</span><br><span class="line">if 表达式 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在if语法结构中所有表达式最终结果都是bool类型,true代表成立执行对应代码</li></ul><h1 id="二-if单独使用"><a href="#二-if单独使用" class="headerlink" title="二. if单独使用"></a>二. if单独使用</h1><ul><li>if单独使用时只影响到自己对应的代码块</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">score := <span class="number">65</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">60</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;及格&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以在if 表达式中声明变量,这个变量的范围只在if中能够使用</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> score:=<span class="number">60</span>; score&gt;=<span class="number">60</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;及格了&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多个单独if使用时相互没有影响</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">score := <span class="number">65</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">60</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;及格&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> score &lt; <span class="number">60</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;不及格&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三-程序调试"><a href="#三-程序调试" class="headerlink" title="三.程序调试"></a>三.程序调试</h1><ul><li>程序调试,俗称:debug,通过特定的手段,一个语句一个语句的观察程序执行过程</li><li>debug经常用在调错中,当结果不符合预期,代码又很多时,debug可以找出哪行出现问题</li><li>程序调试步骤<ul><li>在程序中某行前面单击出现红色圆形</li><li>右键,选择Debug ‘文件名’</li><li>通过点击按钮或使用快捷键选择:向下执行(F6),进入调用(F5),向上跳出(F7)观察程序</li></ul></li></ul><h1 id="四-if"><a href="#四-if" class="headerlink" title="四. if"></a>四. if</h1><h2 id="1-if-…-else-结构"><a href="#1-if-…-else-结构" class="headerlink" title="1. if … else 结构"></a>1. if … else 结构</h2><ul><li>if 可以单独使用也可以结合else使用,当满足互斥条件时使用if…else结构</li><li>if..else结构中如果if成立执行if否则执行else</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">59</span></span><br><span class="line"><span class="keyword">if</span> i &gt;= <span class="number">60</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;及格&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;不及格&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-if多重嵌套"><a href="#2-if多重嵌套" class="headerlink" title="2.if多重嵌套"></a>2.if多重嵌套</h2><ul><li>if每种结构都可以相互嵌套</li><li>理论讲if可以很多层嵌套</li><li>两层嵌套代码示例</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">score := <span class="number">77</span></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">60</span> &#123;</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">60</span> &amp;&amp; score &lt; <span class="number">70</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;及格&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">70</span> &amp;&amp; score &lt; <span class="number">80</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;中等&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">80</span> &amp;&amp; score &lt; <span class="number">90</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;良好&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">100</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;优秀&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;不及格&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-if-…-else-if-…-else结构"><a href="#3-if-…-else-if-…-else结构" class="headerlink" title="3.if … else if …. else结构"></a>3.if … else if …. else结构</h2><ul><li>当需要判断多个条件时使用这种结构</li><li>这个结构是一个整体.只要有一个条件成立后面的都不判断,立即结束</li><li>else可以没有</li><li>改写嵌套代码,修改如下</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">score := <span class="number">77</span></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;优秀&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt;= <span class="number">80</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;良好&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt;= <span class="number">70</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;中等&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt;= <span class="number">60</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;及格&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;不及格&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五-switch结构介绍"><a href="#五-switch结构介绍" class="headerlink" title="五.switch结构介绍"></a>五.switch结构介绍</h1><ul><li>switch也属于条件判断的语句</li><li>支持多种写法,和if .. else if …else 结构的功能类似,但是里面的细节需要注意的地方更多</li><li>switch基本语法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">switch [定义变量;] [变量]&#123;</span><br><span class="line">  case [条件/具体值]:</span><br><span class="line">  //代码</span><br><span class="line">  case [条件/具体值]:</span><br><span class="line">  //代码</span><br><span class="line">  default:</span><br><span class="line">    //代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>switch每个case分支默认只执行一个且是从上向下执行</li><li>default上下位置没有影响,当且仅当所有case都不成立时才执行default</li></ul><h2 id="1-switch用法-一"><a href="#1-switch用法-一" class="headerlink" title="1.switch用法(一)"></a>1.switch用法(一)</h2><ul><li>当变量只有固定的几个值时可以使用switch结构</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">num := <span class="number">16</span></span><br><span class="line"><span class="keyword">switch</span> num &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;2进制&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;8进制&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;10进制&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;16进制&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;内容不正确&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;程序结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>switch也支持在条件位置定义变量,变量有效范围为当前switch</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> num := <span class="number">16</span>; num &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;2进制&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;8进制&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;10进制&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;16进制&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;内容不正确&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;程序结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-switch用法-二"><a href="#2-switch用法-二" class="headerlink" title="2.switch用法(二)"></a>2.switch用法(二)</h2><ul><li>当条件是范围而不是固定值时</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">score := <span class="number">71</span></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;优秀&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;良好&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;中等&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;及格&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;不及格&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;程序结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-switch用法-三"><a href="#3-switch用法-三" class="headerlink" title="3.switch用法(三)"></a>3.switch用法(三)</h2><ul><li>case条件支持多个值,每个值使用逗号分开</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">month := <span class="number">5</span></span><br><span class="line"><span class="keyword">switch</span> month &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;31天&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;28或29天&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;30天&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;程序结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六-穿透和中断"><a href="#六-穿透和中断" class="headerlink" title="六. 穿透和中断"></a>六. 穿透和中断</h1><ul><li>switch结构中某个最多只能执行一个case,使用fallthrough可以让下一个case&#x2F;default继续执行</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> num := <span class="number">1</span>; num &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;4&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;不是1,2,3,4&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;程序结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>break可以用在switch和循环中,表示立即结束,无论当前结构后面还有多少代码</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> num := <span class="number">1</span>; num &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">fmt.Println(<span class="string">&quot;break后面代码都不执行&quot;</span>)</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;4&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;不是1,2,3,4&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;程序结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七-案例"><a href="#七-案例" class="headerlink" title="七.案例"></a>七.案例</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">eval1</span><span class="params">(a, b <span class="type">int</span>, op <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">var</span> res <span class="type">int</span></span><br><span class="line"><span class="keyword">switch</span> op &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">res = a + b</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">res = a - b</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">res = a / b</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">res = a * b</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;unsupported operator: &quot;</span> + op)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">filename = <span class="string">&quot;abc.txt&quot;</span></span><br><span class="line">)</span><br><span class="line">contents, err := ioutil.ReadFile(filename)<span class="comment">//</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, contents)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> contents, err := ioutil.ReadFile(filename); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, contents)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a, b = <span class="number">4</span>, <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> op <span class="type">string</span></span><br><span class="line">fmt.Print(<span class="string">&quot;Please enter an operator: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;op)</span><br><span class="line"><span class="keyword">var</span> c <span class="type">int</span></span><br><span class="line">c = eval1(a, b, op)</span><br><span class="line">fmt.Println(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中：abc.txt为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hjasogkjhas</span><br><span class="line">asdklghjklajsdgh</span><br><span class="line">jklasghkaejl</span><br><span class="line">djkcvhuiosfgj</span><br><span class="line">isdfhgiowej</span><br><span class="line">klsdjio</span><br></pre></td></tr></table></figure><p>程序结果：<br><img src="/images/f0f69a1ed32b482b899a6852f98b8a16.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Go基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础（七）常量</title>
      <link href="/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%83%EF%BC%89%E5%B8%B8%E9%87%8F/"/>
      <url>/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%83%EF%BC%89%E5%B8%B8%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="一-常量概述"><a href="#一-常量概述" class="headerlink" title="一.常量概述"></a>一.常量概述</h1><ul><li>常量是一个固定值,在编译器就确定结果.声明时必须赋值且结果不可以改变.</li><li>因为常量在编译器就确定,可以防止程序运行过程中意外修改</li><li>常量关键字const</li><li>常量定义完可以不使用</li><li>Go语言中常量定义没有明确语法要求,可以不全大写,驼峰即可.</li><li>很多内容可以定义成常量<ul><li>人名</li><li>圆周率</li><li>电话号</li><li>等</li></ul></li></ul><h1 id="二-常量定义"><a href="#二-常量定义" class="headerlink" title="二. 常量定义"></a>二. 常量定义</h1><ul><li>定义常量时如果不是必须指定特定类型,可以省略类型,使用默认类型.且数值类型常量(不定义类型)可以直接进行运算</li><li>常量的值可以是表达式,但是不允许出现变量</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> a <span class="type">string</span> = <span class="string">&quot;smallming&quot;</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">123</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">3</span>*<span class="number">2</span> + <span class="number">5</span><span class="comment">//不要指定类型</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="number">1.5</span><span class="comment">//不要指定类型</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T %T&quot;</span>,c,d)<span class="comment">//int float</span></span><br><span class="line"></span><br><span class="line">fmt.Println(c+d)<span class="comment">//12.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面这种方式是错误的</span></span><br><span class="line">i := <span class="number">3</span></span><br><span class="line"><span class="keyword">const</span> e = i*<span class="number">2</span> + <span class="number">5</span> <span class="comment">//const initializer i * 2 + 5 is not a constant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当定义多个常量时官方推荐的方式</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = <span class="literal">true</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>定义多常量时后一个常量如果没有赋值,与前一个常量值相同.<ul><li>第一个常量必须赋值</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">)</span><br><span class="line">fmt.Println(a,b,c)<span class="comment">//输出:1 1 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三-常量生成器"><a href="#三-常量生成器" class="headerlink" title="三.常量生成器"></a>三.常量生成器</h1><ul><li>当一组常量都是数值类型,可以使用常量生成器iota指定这组常量按照特定规则变化</li><li>iota起始值为0,每次增加1</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a = <span class="literal">iota</span></span><br><span class="line">b </span><br><span class="line">c </span><br><span class="line">)</span><br><span class="line">fmt.Println(a, b, c) <span class="comment">//输出: 0 1 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">d = <span class="literal">iota</span> &lt;&lt; <span class="number">1</span></span><br><span class="line">e </span><br><span class="line">f </span><br><span class="line">)</span><br><span class="line">fmt.Println(d, e, f) <span class="comment">//输出:0 2 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>无论是否使用iota,一组常量中每个的iota值是固定的,iota按照顺序自增1</li><li>每组iota之间无影响</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a = <span class="number">5</span>    <span class="comment">//iota=0</span></span><br><span class="line">b = <span class="number">3</span>    <span class="comment">//iota=1</span></span><br><span class="line">c = <span class="literal">iota</span> <span class="comment">//iota=2</span></span><br><span class="line">d        <span class="comment">//iota=3</span></span><br><span class="line">)</span><br><span class="line">fmt.Println(a, b, c, d) <span class="comment">//输出5 3 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">e = <span class="literal">iota</span> <span class="comment">//iota=0</span></span><br><span class="line">f        <span class="comment">//iota=1</span></span><br><span class="line">g = <span class="number">10</span>   <span class="comment">//iota=2</span></span><br><span class="line">h        <span class="comment">//iota=3</span></span><br><span class="line">i = <span class="literal">iota</span> <span class="comment">//iota=4</span></span><br><span class="line">j        <span class="comment">//iota=5</span></span><br><span class="line">)</span><br><span class="line">fmt.Println(e, f, g, h, i, j) <span class="comment">// 0 1 10 10 4 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="一些案例"><a href="#一些案例" class="headerlink" title="一些案例"></a>一些案例</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">enums</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">cpp = <span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">_ <span class="comment">//1</span></span><br><span class="line">python<span class="comment">//2</span></span><br><span class="line">golang<span class="comment">//3</span></span><br><span class="line">javascript<span class="comment">//4</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">b = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)<span class="comment">//1   2^10</span></span><br><span class="line">kb<span class="comment">//1024</span></span><br><span class="line">mb<span class="comment">//1024 * 1024</span></span><br><span class="line">gb<span class="comment">//1024^3</span></span><br><span class="line">tb<span class="comment">//1024^4</span></span><br><span class="line">pb<span class="comment">//1024^5</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fmt.Println(cpp, javascript, python, golang)</span><br><span class="line">fmt.Println(b, kb, mb, gb, tb, pb)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">text</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a = <span class="number">4</span> &lt;&lt; <span class="literal">iota</span><span class="comment">//4</span></span><br><span class="line">b<span class="comment">//4 + 4 = 8</span></span><br><span class="line">c<span class="comment">//8 + 8 = 16</span></span><br><span class="line">d<span class="comment">//16 + 16 = 32</span></span><br><span class="line">)</span><br><span class="line">fmt.Println(a, b, c, d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Go基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础（六）内建变量</title>
      <link href="/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AD%EF%BC%89%E5%86%85%E5%BB%BA%E5%8F%98%E9%87%8F/"/>
      <url>/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AD%EF%BC%89%E5%86%85%E5%BB%BA%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="内建变量类型"><a href="#内建变量类型" class="headerlink" title="内建变量类型"></a>内建变量类型</h1><ul><li>bool, string</li><li>(u)int, (u)int8, (u)int16, (u)int8, (u)int32, (u)int64, uintptr</li><li>byte, rune</li><li>float32, float64, complex64, complex128(复数)</li></ul><h1 id="复数类型练习：实现欧拉函数"><a href="#复数类型练习：实现欧拉函数" class="headerlink" title="复数类型练习：实现欧拉函数"></a>复数类型练习：实现欧拉函数</h1><p><img src="/images/8c8999ba7692446aa7f8cc766f9dd18d.png" alt="在这里插入图片描述"></p><p><a href="https://baike.baidu.com/item/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/1944850">欧拉函数</a></p><p>在解决这个问题时，我们先来看看复数的实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/cmplx&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">euler</span><span class="params">()</span></span>  &#123;</span><br><span class="line">c := <span class="number">3</span> + <span class="number">4i</span></span><br><span class="line">fmt.Println(cmplx.Abs(c))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">euler()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：5</p><p>欧拉函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line"><span class="string">&quot;math/cmplx&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">euler</span><span class="params">()</span></span>  &#123;</span><br><span class="line">res := cmplx.Pow(math.E, <span class="number">1i</span>*math.Pi) + <span class="number">1</span></span><br><span class="line">fmt.Println(res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">euler()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>e作为底数也可以用cmolx.Exp()来表示<br>可以写为</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line"><span class="string">&quot;math/cmplx&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">euler</span><span class="params">()</span></span> &#123;</span><br><span class="line">res2 := cmplx.Exp(<span class="number">1i</span>*math.Pi) + <span class="number">1</span></span><br><span class="line">res := cmplx.Pow(math.E, <span class="number">1i</span>*math.Pi) + <span class="number">1</span></span><br><span class="line">fmt.Println(res)</span><br><span class="line">fmt.Println(res2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">euler()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果是一样的<br><img src="/images/172e3f8e741c4f61a66c5775ac45db91.png" alt="在这里插入图片描述"></p><h1 id="强制类型转化"><a href="#强制类型转化" class="headerlink" title="强制类型转化"></a>强制类型转化</h1><p>go语言没有隐式类型转化，它所有的类型转化都是强制的<br>举个例子<br>5 * 5 &#x3D; 4 * 4 + 3 * 3<br>我们来看看go语言是如何实现的<br><img src="/images/620f4d94693349939673ac1b41ff3156.png" alt="在这里插入图片描述"><br>报了两个错<br>第一个错是我们已经把a和b都定义为int类型，而math.Sqrt的变量类型的float64，go不会将a<em>a + b</em>b隐式转化为float64，所以我们需要手动强制转换<br><img src="/images/168c4f999568478892b24e6f8677149c.png" alt="在这里插入图片描述"><br>第二个错和第一个错误的类型一样，我们已经将c定义为int类型，所以它也是只能接受int类型，而math.Sqrt的返回类型为float64，同样，我们需要强制转化</p><p>最后代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a,b <span class="type">int</span> = <span class="number">3</span>,<span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> c <span class="type">int</span></span><br><span class="line">c = <span class="type">int</span>(math.Sqrt(<span class="type">float64</span>(a*a + b*b)))</span><br><span class="line">fmt.Println(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：5</p><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>所有语言都存在浮点类型转化时精度丢失的问题<br>可以去看相关博客<a href="https://blog.csdn.net/mario08/article/details/90170142">golang 浮点数精度问题</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Go基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础（五）变量</title>
      <link href="/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%94%EF%BC%89%E5%8F%98%E9%87%8F/"/>
      <url>/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%94%EF%BC%89%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="一-静态语言和动态语言"><a href="#一-静态语言和动态语言" class="headerlink" title="一.静态语言和动态语言"></a>一.静态语言和动态语言</h1><ul><li>静态类型语言和强类型语言是同一个意思,表示在编译期就确定了类型,而且类型是不可以改变的</li><li>动态类型语言和弱类型语言是同一个意思,表示在运行过程中才能确定,且内容是什么类型变量类型跟随变化</li></ul><h1 id="二-Go语言变量简介"><a href="#二-Go语言变量简介" class="headerlink" title="二.Go语言变量简介"></a>二.Go语言变量简介</h1><ul><li>Go语言和其他语言一样都有基本存储容器.可以存储一个或多个值在程序中,方便程序中多次使用容器中内容,这个容器称为:<strong>变量</strong></li><li>Go语言虽然是静态类型语言,但是支持动态类型语言语法,因为Go语言希望程序员少声明变量,增加GC效率</li></ul><h1 id="三-变量命名规则"><a href="#三-变量命名规则" class="headerlink" title="三.变量命名规则"></a>三.变量命名规则</h1><ul><li><p>以字母或下划线开头(Go语言中多不以_开头)</p></li><li><p>后面可以是任意数量的字符、数字和下划线</p></li><li><p>区分大小写</p></li><li><p>不能是关键字(关键字具备特定含义),下面是Go语言的关键字</p><table><thead><tr><th align="center">关键字如下</th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">break</td><td align="center">default</td><td align="center">func</td><td align="center">interface</td><td align="center">select</td></tr><tr><td align="center">case</td><td align="center">defer</td><td align="center">go</td><td align="center">map</td><td align="center">struct</td></tr><tr><td align="center">chan</td><td align="center">else</td><td align="center">goto</td><td align="center">package</td><td align="center">switch</td></tr><tr><td align="center">const</td><td align="center">fallthrough</td><td align="center">if</td><td align="center">range</td><td align="center">type</td></tr><tr><td align="center">continue</td><td align="center">for</td><td align="center">import</td><td align="center">return</td><td align="center">var</td></tr></tbody></table></li><li><p>可以是保留字,但是建议不使用保留字做为变量名,下面是Go语言的保留字</p><table><thead><tr><th align="center">保留字如下</th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">true</td><td align="center">false</td><td align="center">iota</td><td align="center">nil</td><td align="center">int</td></tr><tr><td align="center">int8</td><td align="center">int16</td><td align="center">int32</td><td align="center">int64</td><td align="center">unit</td></tr><tr><td align="center">unit8</td><td align="center">unit16</td><td align="center">unit32</td><td align="center">unitptr</td><td align="center">float32</td></tr><tr><td align="center">float64</td><td align="center">complex128</td><td align="center">complex64</td><td align="center">bool</td><td align="center">byte</td></tr><tr><td align="center">rune</td><td align="center">string</td><td align="center">error</td><td align="center">make</td><td align="center">len</td></tr><tr><td align="center">cap</td><td align="center">new</td><td align="center">append</td><td align="center">copy</td><td align="center">close</td></tr><tr><td align="center">deletecomplex</td><td align="center">real</td><td align="center">imag</td><td align="center">panic</td><td align="center"></td></tr><tr><td align="center">recover</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table></li><li><p>在同一范围内不允许出现同名变量</p></li><li><p>Go语言要求变量声明后至少使用一次(赋值不属于使用)</p></li></ul><h1 id="四-单个变量声明及赋值"><a href="#四-单个变量声明及赋值" class="headerlink" title="四.单个变量声明及赋值"></a>四.单个变量声明及赋值</h1><ul><li>先声明后赋值(声明后开辟内存,不同类型变量都有不同初值)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法:</span></span><br><span class="line"><span class="comment">//1. 声明</span></span><br><span class="line"><span class="keyword">var</span> 变量名 类型</span><br><span class="line"><span class="comment">//2. 赋值</span></span><br><span class="line">变量名=值</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例:</span></span><br><span class="line"><span class="keyword">var</span> smallming <span class="type">string</span></span><br><span class="line">smallming = <span class="string">&quot;英文名&quot;</span></span><br></pre></td></tr></table></figure><ul><li>声明并赋值(此方式不建议)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法:</span></span><br><span class="line"><span class="keyword">var</span> 变量名 类型 = 值</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="keyword">var</span> smallming <span class="type">string</span> = <span class="string">&quot;英文名&quot;</span></span><br></pre></td></tr></table></figure><ul><li>声明并赋值(省略类型,变量类型取决于值的类型)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法:</span></span><br><span class="line"><span class="keyword">var</span> 变量名 = 值</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例:</span></span><br><span class="line"><span class="keyword">var</span> smallming = <span class="string">&quot;英文名&quot;</span></span><br></pre></td></tr></table></figure><ul><li>短变量(只能在函数内使用)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法:</span></span><br><span class="line">变量名 := 值</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例:</span></span><br><span class="line">smallming := <span class="string">&quot;英文名&quot;</span></span><br></pre></td></tr></table></figure><h1 id="五-声明多个变量和赋值"><a href="#五-声明多个变量和赋值" class="headerlink" title="五.声明多个变量和赋值"></a>五.声明多个变量和赋值</h1><ul><li>先声明后赋值</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a, b, c <span class="type">int</span></span><br><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">fmt.Println(a, b, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明时赋值</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a, b, c, d = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">false</span></span><br><span class="line">fmt.Println(a, b, c, d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明并赋值,推荐方式</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="literal">true</span></span><br><span class="line">c = <span class="string">&quot;测试&quot;</span></span><br><span class="line">)</span><br><span class="line">fmt.Println(a, b, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用短变量给多个变量赋值时,必须要保证至少有个变量是没有声明的</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="literal">true</span></span><br><span class="line">c = <span class="string">&quot;测试&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//短变量操作多个值时只要保证里面至少有一个新变量</span></span><br><span class="line">b, c, d := <span class="literal">false</span>, <span class="string">&quot;smallming&quot;</span>, <span class="number">3</span></span><br><span class="line">fmt.Println(a, b, c, d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Go基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础（四）输入</title>
      <link href="/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%E8%BE%93%E5%85%A5/"/>
      <url>/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%E8%BE%93%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="一-用户输入简介"><a href="#一-用户输入简介" class="headerlink" title="一.用户输入简介"></a>一.用户输入简介</h1><ul><li>用户输入在平时练习中使用频率较高.</li><li>程序运行时,运行到接收用户输入语句,程序阻塞,用户在控制台输入内容后,把内容赋值给对应的变量,程序继续运行.</li><li>在Go语言中有多种接收用户输入的方式,其中使用fmt包的Scan函数使用最简单</li></ul><h1 id="二-接收用户输入的几种方式"><a href="#二-接收用户输入的几种方式" class="headerlink" title="二.接收用户输入的几种方式"></a>二.接收用户输入的几种方式</h1><ul><li>使用<code>Scanln(&amp;变量名,&amp;变量名)</code>的方式接收.<ul><li>输入的内容必须都在同一行</li><li>每个内容之间使用空格分割</li><li>回车换行后表示停止输入.</li><li>如果希望接收3个值,而在控制台只输入2个值,回车后也停止接收</li><li>如果希望接收2个值,而在控制台输入3个,回车后只能接收两个值</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> name, age <span class="type">string</span> <span class="comment">//声明两个字符串变量,变量在本章节后面讲解</span></span><br><span class="line">fmt.Print(<span class="string">&quot;请输入姓名和姓名:&quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;name, &amp;age) <span class="comment">//此处&amp;变量名是地址.指针地址在后面章节境界</span></span><br><span class="line">fmt.Println(<span class="string">&quot;接收到内容为:&quot;</span>, name, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>也可以使用<code>fmt.Scanf(verb,&amp;变量)</code>按照特定的格式进行输入.<ul><li>下面例子演示的每次换行输入一个内容</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a,b <span class="type">string</span></span><br><span class="line">fmt.Scanf(<span class="string">&quot;%s\n%s&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n%s&quot;</span>,a,b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>需要注意,如果同行输入两个字符串,中间使用空格,否则编译器无法对输入内容拆分</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">string</span></span><br><span class="line"><span class="comment">//输入时必须输入: aaa bbb</span></span><br><span class="line"><span class="comment">//如果中间没有空格则把所有内容都赋值给了a</span></span><br><span class="line">fmt.Scanf(<span class="string">&quot;%s%s&quot;</span>,&amp;a,&amp;b)</span><br><span class="line">fmt.Println(a,b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Go基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础（三）转义字符</title>
      <link href="/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/"/>
      <url>/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="一-转义字符介绍"><a href="#一-转义字符介绍" class="headerlink" title="一.转义字符介绍"></a>一.转义字符介绍</h1><ul><li><p>在Go语言中可以使用<code>%+特定字母</code>或<code>/+特定字母</code>形成转义字符,这个表示特定含义的组合称为转义字符.</p></li><li><p>在Go语言中又称为verb</p></li><li><p>转义字符在Go语言中在以下两种情况使用频率较高</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;verb&quot;</span>,内容)<span class="comment">//输出</span></span><br><span class="line">fmt.Scanf(<span class="string">&quot;verb&quot;</span>,接收变量)<span class="comment">//输入</span></span><br></pre></td></tr></table></figure><h1 id="二-进制简述"><a href="#二-进制简述" class="headerlink" title="二.进制简述"></a>二.进制简述</h1><ul><li>进制数在编程中经常遇见,进制数分为二进制,八进制,十进制和十六进制.其中十进制就是平时我们接触最多的</li><li>X进制数都满足:<ul><li>满X进一位</li><li>每位最大为X-1</li><li>第N位代表的X的(N-1)次方</li></ul></li><li>其中十六进制中a&#x3D;10,b&#x3D;11,c&#x3D;12,d&#x3D;13,e&#x3D;14,f&#x3D;15</li><li>举例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">十进制 18</span><br><span class="line">二进制 10010</span><br><span class="line">八进制 22</span><br><span class="line">十六进制 12</span><br></pre></td></tr></table></figure><h1 id="三-常用转义字符汇总"><a href="#三-常用转义字符汇总" class="headerlink" title="三.常用转义字符汇总"></a>三.常用转义字符汇总</h1><ul><li>以下为常用转义字符</li></ul><table><thead><tr><th>verb</th><th align="center">含义</th></tr></thead><tbody><tr><td>%d</td><td align="center">十进制整数</td></tr><tr><td>%x,%X</td><td align="center">大小写方式显示十六进制整数</td></tr><tr><td>%o</td><td align="center">八进制整数</td></tr><tr><td>%b</td><td align="center">二进制整数</td></tr><tr><td>%f,%g,%e</td><td align="center">浮点数</td></tr><tr><td>%t</td><td align="center">布尔值</td></tr><tr><td>%c</td><td align="center">字符</td></tr><tr><td>%s</td><td align="center">字符串</td></tr><tr><td>%q</td><td align="center">带双引号字符串</td></tr><tr><td>%v</td><td align="center">内置格式内容</td></tr><tr><td>%T</td><td align="center">类型</td></tr><tr><td>%p</td><td align="center">内存地址</td></tr><tr><td>%%</td><td align="center">字符%</td></tr><tr><td>\n</td><td align="center">换行</td></tr><tr><td>\t</td><td align="center">缩进</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Go基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础（二）打印</title>
      <link href="/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%E6%89%93%E5%8D%B0/"/>
      <url>/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%E6%89%93%E5%8D%B0/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="打印输出"><a href="#打印输出" class="headerlink" title="打印输出"></a>打印输出</h1><p>多种输出方式,不同的输出适用场景不同.归纳起来三种,每种还分为3种方式(原内容,原内容+ln,原内容+f)</p><ul><li>PrintXX()</li><li>FPrintXX()</li><li>SPringXX()</li></ul><h2 id="PrintXX"><a href="#PrintXX" class="headerlink" title="PrintXX"></a>PrintXX</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;内容&quot;</span>,<span class="string">&quot;内容&quot;</span>)<span class="comment">//输出内容后换行</span></span><br><span class="line">fmt.Print(<span class="string">&quot;内容&quot;</span>,<span class="string">&quot;内容&quot;</span>)<span class="comment">//输出内容后不换行</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;verb&quot;</span>,<span class="string">&quot;内容&quot;</span>)<span class="comment">//根据verb输出指定格式内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FPrintXX"><a href="#FPrintXX" class="headerlink" title="FPrintXX"></a>FPrintXX</h2><p>FprintXX在Go Web中使用比较多,把内容写到响应流中.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//os.Stdout 表示控制台输出流</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Fprint(os.Stdout, <span class="string">&quot;内容1&quot;</span>)<span class="comment">//向流中写入内容,多个内容之间没有空格</span></span><br><span class="line">fmt.Fprintln(os.Stdout, <span class="string">&quot;内容2&quot;</span>)<span class="comment">//向流中写入内容后额外写入换行符,多个内容之间空格分割</span></span><br><span class="line">fmt.Fprintf(os.Stdout, <span class="string">&quot;%s&quot;</span>, <span class="string">&quot;内容3&quot;</span>)<span class="comment">//根据verb格式向流中写入内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SPrintXX"><a href="#SPrintXX" class="headerlink" title="SPrintXX"></a>SPrintXX</h2><ul><li>以Sprintln()举例,和Println()主要的区别是:<ul><li>Sprintln()把形成结果以字符串返回,并没有打印到控制台</li><li>Println()把结果打印到控制台,返回内容长度和错误</li></ul></li><li>所以从严格意义角度讲SprintXX不是打印输出,而更像字符串转换</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Sprint(<span class="string">&quot;内容1&quot;</span>, <span class="string">&quot;内容12&quot;</span>)</span><br><span class="line">fmt.Sprintln(<span class="string">&quot;内容2&quot;</span>)</span><br><span class="line">fmt.Sprintf(<span class="string">&quot;%s&quot;</span>, <span class="string">&quot;内容3&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Go基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础（一）Hello World</title>
      <link href="/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89Hello-World/"/>
      <url>/2022/09/03/Go%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89Hello-World/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>大部分语言的第一个程序都是Hello World，go也不例外，作为我们系列文章的第一篇，我们同样以Hello World作为示范来展示一下go语言</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/7073418e7e644e699cc6022afebc658f.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Go基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
